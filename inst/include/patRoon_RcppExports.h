// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_patRoon_RCPPEXPORTS_H_GEN_
#define RCPP_patRoon_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace patRoon {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("patRoon", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("patRoon", "_patRoon_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in patRoon");
            }
        }
    }

    inline bool initBrukerLibrary(const std::string& path, bool force = false) {
        typedef SEXP(*Ptr_initBrukerLibrary)(SEXP,SEXP);
        static Ptr_initBrukerLibrary p_initBrukerLibrary = NULL;
        if (p_initBrukerLibrary == NULL) {
            validateSignature("bool(*initBrukerLibrary)(const std::string&,bool)");
            p_initBrukerLibrary = (Ptr_initBrukerLibrary)R_GetCCallable("patRoon", "_patRoon_initBrukerLibrary");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_initBrukerLibrary(Shield<SEXP>(Rcpp::wrap(path)), Shield<SEXP>(Rcpp::wrap(force)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<bool >(rcpp_result_gen);
    }

    inline double getBrukerCCS(double mob, int charge, double mz) {
        typedef SEXP(*Ptr_getBrukerCCS)(SEXP,SEXP,SEXP);
        static Ptr_getBrukerCCS p_getBrukerCCS = NULL;
        if (p_getBrukerCCS == NULL) {
            validateSignature("double(*getBrukerCCS)(double,int,double)");
            p_getBrukerCCS = (Ptr_getBrukerCCS)R_GetCCallable("patRoon", "_patRoon_getBrukerCCS");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getBrukerCCS(Shield<SEXP>(Rcpp::wrap(mob)), Shield<SEXP>(Rcpp::wrap(charge)), Shield<SEXP>(Rcpp::wrap(mz)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double getBrukerMob(double ccs, int charge, double mz) {
        typedef SEXP(*Ptr_getBrukerMob)(SEXP,SEXP,SEXP);
        static Ptr_getBrukerMob p_getBrukerMob = NULL;
        if (p_getBrukerMob == NULL) {
            validateSignature("double(*getBrukerMob)(double,int,double)");
            p_getBrukerMob = (Ptr_getBrukerMob)R_GetCCallable("patRoon", "_patRoon_getBrukerMob");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_getBrukerMob(Shield<SEXP>(Rcpp::wrap(ccs)), Shield<SEXP>(Rcpp::wrap(charge)), Shield<SEXP>(Rcpp::wrap(mz)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_patRoon_RCPPEXPORTS_H_GEN_
