% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mslibrary.R
\docType{class}
\name{MSLibrary-class}
\alias{MSLibrary-class}
\alias{MSLibrary}
\alias{records,MSLibrary-method}
\alias{records}
\alias{spectra,MSLibrary-method}
\alias{spectra}
\alias{length,MSLibrary-method}
\alias{names,MSLibrary-method}
\alias{show,MSLibrary-method}
\alias{[,MSLibrary,ANY,missing,missing-method}
\alias{[[,MSLibrary,ANY,missing-method}
\alias{$,MSLibrary-method}
\alias{as.data.table,MSLibrary-method}
\alias{delete,MSLibrary-method}
\alias{filter,MSLibrary-method}
\alias{convertToSuspects,MSLibrary-method}
\alias{export,MSLibrary-method}
\alias{merge,MSLibrary,MSLibrary-method}
\title{Class to store data from a loaded MS library}
\usage{
\S4method{records}{MSLibrary}(obj)

\S4method{spectra}{MSLibrary}(obj)

\S4method{length}{MSLibrary}(x)

\S4method{names}{MSLibrary}(x)

\S4method{show}{MSLibrary}(object)

\S4method{[}{MSLibrary,ANY,missing,missing}(x, i, j, ..., drop = TRUE)

\S4method{[[}{MSLibrary,ANY,missing}(x, i, j)

\S4method{$}{MSLibrary}(x, name)

\S4method{as.data.table}{MSLibrary}(x)

\S4method{delete}{MSLibrary}(obj, i = NULL, j = NULL, ...)

\S4method{filter}{MSLibrary}(
  obj,
  properties = NULL,
  massRange = NULL,
  mzRangeSpec = NULL,
  relMinIntensity = NULL,
  topMost = NULL,
  onlyAnnotated = FALSE,
  negate = FALSE
)

\S4method{convertToSuspects}{MSLibrary}(
  obj,
  adduct,
  spectrumType = "MS2",
  avgSpecParams = getDefAvgPListParams(minIntensityPre = 0, minIntensityPost = 2, topMost
    = 10),
  collapse = TRUE,
  suspects = NULL,
  prefCalcChemProps = TRUE
)

\S4method{export}{MSLibrary}(obj, type = "msp", out)

\S4method{merge}{MSLibrary,MSLibrary}(x, y, ...)
}
\arguments{
\item{x, obj, object}{\code{MSLibrary} object to be accessed.}

\item{i}{For \code{[}/\code{[[}: A numeric or character value which is used to select records by
their index or name, respectively (for the order/names see \code{names()}).\cr\cr For \code{[}: Can also be logical to perform logical selection
(similar to regular vectors). If missing all records are selected.\cr\cr For \code{[[}: should be a scalar value.}

\item{\dots}{Unused.}

\item{drop, j}{ignored.}

\item{name}{The record name (partially matched).}

\item{properties}{A named \code{list} with properties to be filtered. Each item in the \code{list} should be named
with the name of the property, and should be a vector with allowed values. To obtain the possible properties, run
\emph{e.g.} \code{names(records)}. Example: \code{properties=list(Instrument_type=c("LC-ESI-QTOF","LC-ESI-TOF"))}. Set to \code{NULL} to ignore.}

\item{massRange}{Records with a neutral mass outside this range will be removed. Should be a two-sized \code{numeric}
vector with the lower and upper mass range. Set to \code{NULL} to ignore.}

\item{mzRangeSpec}{Similar to the \code{massRange} argument, but removes any peaks from recorded mass spectra outside
the given \emph{m/z} range.}

\item{relMinIntensity}{The minimum relative intensity (\samp{0-1}) of a mass peak to be kept. Set to \code{NULL} to
ignore.}

\item{topMost}{Only keep \code{topMost} number of mass peaks for each spectrum. This filter is applied after others.
Set to \code{NULL} to ignore.}

\item{onlyAnnotated}{If \code{TRUE} then only recorded spectra that are formula annotated are kept.}

\item{negate}{If \code{TRUE} then filters are performed in opposite manner.}

\item{adduct}{An \code{\link{adduct}} object (or something that can be converted to it with \code{\link{as.adduct}}).
Any records with a different adduct (\code{Precursor_type}) are not considered. Alternatively, \code{adduct} can be
set to \code{NULL} to not filter out any records. However, in this case \emph{no} MS/MS fragments will be added to
the returned suspect list.}

\item{spectrumType}{A \code{character} vector which limits library records to the given spectrum types
(\code{Spectrum_type} field, \emph{e.g.} \code{"MS2"}). Set to \code{NULL} to allow all spectrum types.}

\item{avgSpecParams}{A \code{list} with parameters used for averaging spectra. See \code{\link{getDefAvgPListParams}}
for more details.}

\item{collapse}{Whether records with the same first-block \acronym{InChIKey} should be collapsed. See the
\verb{Suspect conversion} section for details.}

\item{suspects}{If not \code{NULL} then this should be a suspect list (see \code{\link{screenSuspects}}) which will
be amended with spectra data. See the \verb{Suspect conversion} section for details.}

\item{prefCalcChemProps}{If \code{TRUE} then calculated chemical properties such as the formula and
\acronym{InChIKey} are preferred over what is already present in the input suspect list to \code{convertToSuspects}. For efficiency reasons it is
recommended to set this to \code{TRUE}. See the \verb{Validating and calculating chemical properties} section for
more details.}

\item{type}{The export type. Currently just \code{"msp"}.}

\item{out}{The file path to the output library file.}

\item{y}{The \code{MSLibrary} to be merged with \code{x}.}
}
\value{
\code{delete} returns the object for which the specified data was removed.

\code{filter} returns a filtered \code{MSLibrary} object.

\code{convertToSuspects} return a suspect list (\code{data.table}), which can be used with
  \code{\link{screenSuspects}}.

\code{merge} returns a merged \code{MSLibrary} object.
}
\description{
Stores the spectra and metadata from the records of an MS library.
}
\details{
This class is used by \code{\link{loadMSLibrary}} to store the loaded MS library data.
}
\section{Methods (by generic)}{
\itemize{
\item \code{records(MSLibrary)}: Accessor method for the \code{records} slot of an \code{MSLibrary} class.

\item \code{spectra(MSLibrary)}: Accessor method for the \code{spectra} slot of an \code{MSLibrary} class.

\item \code{length(MSLibrary)}: Obtains the total number of records stored.

\item \code{names(MSLibrary)}: Obtains the names of the stored records (\code{DB_ID} field).

\item \code{show(MSLibrary)}: Shows summary information for this object.

\item \code{x[i}: Subset on records.

\item \code{x[[i}: Extracts a spectrum table for a record.

\item \code{$}: Extracts a spectrum table for a record.

\item \code{as.data.table(MSLibrary)}: Converts all the data (spectra and metadata) to a single \code{data.table}.

\item \code{delete(MSLibrary)}: Completely deletes specified full records or spectra.

\item \code{filter(MSLibrary)}: Performs rule-based filtering of records and spectra. This may be especially to improve
annotation with \code{\link{generateCompoundsLibrary}}.

\item \code{convertToSuspects(MSLibrary)}: Converts the MS library data to a suspect list, which can be used with
\code{\link{screenSuspects}}. See the \verb{Suspect conversion} section for details.

\item \code{export(MSLibrary)}: Exports the library data to a \file{.msp} file. The export is accelerated by an \code{C++}
interface with \CRANpkg{Rcpp}.

\item \code{merge(x = MSLibrary, y = MSLibrary)}: Merges two \code{MSLibrary} objects (\code{x} and \code{y}). The records from \code{y} that are
unique are added to \code{x}. Records that were already in \code{x} are simply ignored. The
\href{https://splash.fiehnlab.ucdavis.edu/}{SPLASH} values are used to test equality between records, hence, the
\code{calcSPLASH} argument to \code{\link{loadMSLibrary}} should be \code{TRUE}.

}}
\section{Slots}{

\describe{
\item{\code{records}}{A \code{\link{data.table}} with metadata for all records. Use the \code{records} method for access.}

\item{\code{spectra}}{A \code{list} with all (annotated) spectra. Each spectrum is stored in a \code{\link{data.table}}. Use
the \code{spectra} method for access.}
}}

\note{
\code{export} does not split any \code{Synon} data that was merged when the library was loaded.
}
\section{S4 class hierarchy}{
 \itemize{   \item{\code{\link{workflowStep}}}   \itemize{     \item{\strong{\code{\link{MSLibrary}}}}   } }
}

\section{Suspect conversion}{
 The \code{convertToSuspects} method converts MS library data to a suspect list, which
  can be used with \emph{e.g.} \code{\link{screenSuspects}}. Furthermore, this function can also amend existing
  suspect lists with spectral data.

  Conversion occurs in either of the following three methods: \enumerate{

  \item \emph{Direct} (\code{collapse=FALSE} and \code{suspects=NULL}): each record is considered a suspect, and the
  resulting suspect list is generated directly by converting the records metadata. The \code{fragments_mz} column for
  each suspect is constructed from the mass peaks of the corresponding record.

  \item \emph{Collapse} (\code{collapse=TRUE} and \code{suspects=NULL}): All records with the same first-block
  \acronym{InChIKey} are first merged, and their spectra are averaged using the parameters from the
  \code{avgSpecParams} argument (see \code{\link{getDefAvgPListParams}}). The suspect list is based on the merged
  records, where the \code{fragments_mz} column is constructed from the averaged spectra. This is generally a good
  default, especially with large MS libraries.

  \item \emph{Amend} (\code{suspects} is not \code{NULL}): only those records are considered if their first-block
  \acronym{InChIKey} is present in the suspect list. The remaining records and their spectra are then collapsed as
  described for the \emph{Collapse} method, and the \code{fragments_mz} column for each suspect is set from the
  averaged spectra. If a suspect is not present in the library, its \code{fragments_mz} value will be empty. Note
  that any existing \code{fragments_mz} data will be overwritten.

  }
}

\section{Validating and calculating chemical properties}{
 Chemical properties such as \acronym{SMILES},
  \acronym{InChIKey} and formula in the input suspect list to \code{convertToSuspects} are automatically validated and calculated if missing/invalid.

  The internal validation/calculation process performs the following steps: \itemize{

  \item Validation of \acronym{SMILES}, \acronym{InChI}, \acronym{InChIKey} and formula data (if present). Invalid
  entries will be set to \code{NA}.

  \item The \acronym{SMILES} and \acronym{InChI} data are used to calculate missing or invalid \acronym{SMILES},
  \acronym{InChI}, \acronym{InChIKey} and formula data. If \code{prefCalcChemProps=TRUE} then existing
  \acronym{InChIKey} and formula data is overwritten by calculated values whenever possible.

  \item The chemical formulae which were \emph{not} calculated are verified and normalized. This process may be time
  consuming, and is potentially largely avoided by setting \code{prefCalcChemProps=TRUE}.

  \item Neutral masses are calculated for missing values (\code{prefCalcChemProps=FALSE}) or whenever possible
  (\code{prefCalcChemProps=TRUE}).

  }

  Note that calculation of formulae for molecules that are isotopically labelled is currently only supported for
  deuterium (2H) elements.

  This functionality relies heavily on \href{http://openbabel.org/wiki/Main_Page}{OpenBabel}, please make sure it is
  installed.
}

\references{
\insertRef{OBoyle2011}{patRoon}

\addCitations{Rcpp}{1} \cr\cr \addCitations{Rcpp}{2} \cr\cr \addCitations{Rcpp}{3}

\insertRef{Wohlgemuth2016}{patRoon}
}
\seealso{
\code{\link{loadMSLibrary}}
}
