% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compounds.R, R/compounds-set.R
\docType{class}
\name{compounds-class}
\alias{compounds-class}
\alias{compounds}
\alias{compoundsConsensus-class}
\alias{compoundsConsensus}
\alias{defaultExclNormScores,compounds-method}
\alias{show,compounds-method}
\alias{identifiers,compounds-method}
\alias{identifiers}
\alias{filter,compounds-method}
\alias{addFormulaScoring,compounds-method}
\alias{addFormulaScoring}
\alias{getMCS,compounds-method}
\alias{plotStructure,compounds-method}
\alias{plotScores,compounds-method}
\alias{annotatedPeakList,compounds-method}
\alias{plotSpectrum,compounds-method}
\alias{consensus,compounds-method}
\alias{compoundsSet-class}
\alias{compoundsSet}
\alias{compoundsConsensusSet-class}
\alias{compoundsConsensusSet}
\alias{show,compoundsSet-method}
\alias{delete,compoundsSet-method}
\alias{[,compoundsSet,ANY,missing,missing-method}
\alias{filter,compoundsSet-method}
\alias{plotSpectrum,compoundsSet-method}
\alias{addFormulaScoring,compoundsSet-method}
\alias{annotatedPeakList,compoundsSet-method}
\alias{consensus,compoundsSet-method}
\alias{compoundsUnset-class}
\alias{compoundsUnset}
\alias{unset,compoundsSet-method}
\alias{unset,compoundsConsensusSet-method}
\title{Compound annotations class}
\usage{
\S4method{defaultExclNormScores}{compounds}(obj)

\S4method{show}{compounds}(object)

\S4method{identifiers}{compounds}(compounds)

\S4method{filter}{compounds}(
  obj,
  minExplainedPeaks = NULL,
  minScore = NULL,
  minFragScore = NULL,
  minFormulaScore = NULL,
  scoreLimits = NULL,
  ...
)

\S4method{addFormulaScoring}{compounds}(
  compounds,
  formulas,
  updateScore = FALSE,
  formulaScoreWeight = 1
)

\S4method{getMCS}{compounds}(obj, index, groupName)

\S4method{plotStructure}{compounds}(obj, index, groupName, width = 500, height = 500)

\S4method{plotScores}{compounds}(
  obj,
  index,
  groupName,
  normalizeScores = "max",
  excludeNormScores = defaultExclNormScores(obj),
  onlyUsed = TRUE
)

\S4method{annotatedPeakList}{compounds}(
  obj,
  index,
  groupName,
  MSPeakLists,
  formulas = NULL,
  onlyAnnotated = FALSE
)

\S4method{plotSpectrum}{compounds}(
  obj,
  index,
  groupName,
  MSPeakLists,
  formulas = NULL,
  plotStruct = FALSE,
  title = NULL,
  specSimParams = getDefSpecSimParams(),
  mincex = 0.9,
  xlim = NULL,
  ylim = NULL,
  maxMolSize = c(0.2, 0.4),
  molRes = c(100, 100),
  ...
)

\S4method{consensus}{compounds}(
  obj,
  ...,
  absMinAbundance = NULL,
  relMinAbundance = NULL,
  uniqueFrom = NULL,
  uniqueOuter = FALSE,
  rankWeights = 1,
  labels = NULL
)

\S4method{show}{compoundsSet}(object)

\S4method{delete}{compoundsSet}(obj, i, j, ...)

\S4method{[}{compoundsSet,ANY,missing,missing}(x, i, j, ..., sets = NULL, updateConsensus = FALSE, drop = TRUE)

\S4method{filter}{compoundsSet}(obj, ..., sets = NULL, updateConsensus = FALSE, negate = FALSE)

\S4method{plotSpectrum}{compoundsSet}(
  obj,
  index,
  groupName,
  MSPeakLists,
  formulas = NULL,
  plotStruct = FALSE,
  title = NULL,
  specSimParams = getDefSpecSimParams(),
  mincex = 0.9,
  xlim = NULL,
  ylim = NULL,
  maxMolSize = c(0.2, 0.4),
  molRes = c(100, 100),
  perSet = TRUE,
  mirror = TRUE,
  ...
)

\S4method{addFormulaScoring}{compoundsSet}(
  compounds,
  formulas,
  updateScore = FALSE,
  formulaScoreWeight = 1
)

\S4method{annotatedPeakList}{compoundsSet}(obj, index, groupName, MSPeakLists, formulas = NULL, ...)

\S4method{consensus}{compoundsSet}(
  obj,
  ...,
  absMinAbundance = NULL,
  relMinAbundance = NULL,
  uniqueFrom = NULL,
  uniqueOuter = FALSE,
  rankWeights = 1,
  labels = NULL,
  filterSets = FALSE,
  setThreshold = 0,
  setThresholdAnn = 0
)

\S4method{unset}{compoundsSet}(obj, set)

\S4method{unset}{compoundsConsensusSet}(obj, set)
}
\arguments{
\item{obj, object, compounds, x}{The \code{compound} object.}

\item{minExplainedPeaks, scoreLimits}{Passed to the
\code{\link[=filter,featureAnnotations-method]{featureAnnotations}} method.}

\item{minScore, minFragScore, minFormulaScore}{Minimum overall score, in-silico fragmentation score and formula score,
respectively. Set to \code{NULL} to ignore. The \code{scoreLimits} argument allows for more advanced score
filtering.}

\item{\dots}{For \code{plotSpectrum}: Further arguments passed to \code{\link[graphics]{plot}}.

  For \code{delete}: passed to the function specified as \code{j}.

  for \code{filter}: passed to the \code{\link[=filter,featureAnnotations-method]{featureAnnotations}} method.

  For \code{consensus}: any further (and unique) \code{compounds} objects.

  \setsPassedArgs1{compounds}}

\item{formulas}{The \code{\link{formulas}} object that should be used for scoring/annotation. For \code{plotSpectrum}
and \code{annotatedPeakList}: set to \code{NULL} to ignore.}

\item{updateScore}{If set to \code{TRUE} then the \code{score} column is
updated by adding the normalized \option{formulaScore} (weighted by
\option{formulaScoreWeight}). Currently, this \strong{only} makes sense for
\command{MetFrag} results!}

\item{formulaScoreWeight}{Weight used to update scoring (see
\code{updateScore} parameter).}

\item{index}{The numeric index of the candidate structure.

  For \code{plotStructure} and \code{getMCS}: multiple indices (\emph{i.e.} vector with length >=2) should be
  specified to plot/calculate the most common substructure (MCS). Alternatively, \samp{-1} may be specified to select
  all candidates.

  For \code{plotSpectrum}: two indices can be specified to compare spectra. In this case \code{groupName} should
  specify values for the spectra to compare.}

\item{groupName}{The name of the feature group (or feature groups when comparing spectra) to which the candidate
belongs.}

\item{width, height}{The dimensions (in pixels) of the raster image that
should be plotted.}

\item{normalizeScores}{A \code{character} that specifies how normalization of
annotation scorings occurs. Either
\code{"none"} (no normalization),
\code{"max"} (normalize to max value) or \code{"minmax"} (perform min-max
normalization). Note that normalization of negative scores (e.g. output by
\command{SIRIUS}) is always performed as min-max. Furthermore, currently
normalization for \code{compounds} takes the original min/max scoring
values into account when candidates were generated. Thus, for
\code{compounds} scoring, normalization is not affected when candidate
results were removed after they were generated (\emph{e.g.} by use of
\code{filter}).}

\item{excludeNormScores}{A
  \code{character} vector specifying any compound scoring names that
  should \emph{not} be normalized. Set to \code{NULL} to normalize all
  scorings. Note that whether any normalization occurs is set by the
  \code{excludeNormScores} argument.

  For \code{compounds}: By default \code{score} and
  \code{individualMoNAScore} are set to mimic the behavior of the
  \command{MetFrag} web interface.}

\item{onlyUsed}{If \code{TRUE} then only scorings are plotted that actually
have been used to rank data (see the \code{scoreTypes} argument to
\code{\link{generateCompoundsMetFrag}} for more details).}

\item{MSPeakLists}{The \code{\link{MSPeakLists}} object that was used to generate the candidate}

\item{onlyAnnotated}{Set to \code{TRUE} to filter out any peaks that could
not be annotated.}

\item{plotStruct}{If \code{TRUE} then the candidate structure is drawn in the spectrum. Currently not supported when
comparing spectra.}

\item{title}{The title of the plot. If \code{NULL} a title will be automatically made.}

\item{specSimParams}{A named \code{list} with parameters that influence the calculation of MS spectra similarities.
See the \link[=specSimParams]{spectral similarity parameters} documentation for more details.}

\item{mincex}{The formula annotation labels are automatically scaled. The \code{mincex} argument forces a minimum
\code{cex} value for readability.}

\item{xlim, ylim}{Sets the plot size limits used by
\code{\link[graphics]{plot}}. Set to \code{NULL} for automatic plot sizing.}

\item{maxMolSize}{Numeric vector of size two with the maximum width/height of the candidate structure (relative to
the plot size).}

\item{molRes}{Numeric vector of size two with the resolution of the candidate structure (in pixels).}

\item{absMinAbundance, relMinAbundance}{Minimum absolute or relative
(\samp{0-1}) abundance across objects for a result to be kept. For
instance, \code{relMinAbundance=0.5} means that a result should be present
in at least half of the number of compared objects. Set to \samp{NULL} to
ignore and keep all results. Limits cannot be set when \code{uniqueFrom} is
not \code{NULL}.}

\item{uniqueFrom}{Set this argument to only retain compounds that are unique
within one or more of the objects for which the consensus is made.
Selection is done by setting the value of \code{uniqueFrom} to a
\code{logical} (values are recycled), \code{numeric} (select by index) or a
\code{character} (as obtained with \code{algorithm(obj)}). For
\code{logical} and \code{numeric} values the order corresponds to the order
of the objects given for the consensus. Set to \code{NULL} to ignore.}

\item{uniqueOuter}{If \code{uniqueFrom} is not \code{NULL} and if
\code{uniqueOuter=TRUE}: only retain data that are also unique between
objects specified in \code{uniqueFrom}.}

\item{rankWeights}{A numeric vector with weights of to calculate the mean
ranking score for each candidate. The value will be re-cycled if necessary,
hence, the default value of \samp{1} means equal weights for all considered
objects.}

\item{labels}{A \code{character} with names to use for labelling. If \code{NULL} labels are automatically generated.}

\item{i, j, drop}{Passed to the \code{\link[=[,featureAnnotations,ANY,missing,missing-method]{featureAnnotations}}
method.}

\item{sets}{\setsWF A \code{character} with name(s) of the sets to keep (or remove if \code{negate=TRUE}). Note: if
\code{updateConsensus=FALSE} then the \code{setCoverage} column of the annotation results is not updated.}

\item{updateConsensus}{\setsWF If \code{TRUE} then the annonation consensus among set results is updated. See the
\verb{Sets workflows} section for more details.}

\item{negate}{Passed to the \code{\link[=filter,featureAnnotations-method]{featureAnnotations}} method.}

\item{perSet, mirror}{\setsWF If \code{perSet=TRUE} then the set specific mass peaks are annotated separately.
Furthermore, if \code{mirror=TRUE} (and there are two sets in the object) then a mirror plot is generated.}

\item{filterSets}{\setsWF Controls how algorithms concensus abundance filters are applied. See the \verb{Sets
workflows} section below.}

\item{setThreshold, setThresholdAnn}{\setsWF Thresholds used to create the annotation set consensus. See
\code{\link{generateCompounds}}.}

\item{set}{\setsWF The name of the set.}
}
\value{
\code{addFormulaScoring} returns a \code{compounds} object updated
  with formula scoring.

\code{getMCS} returns an \CRANpkg{rcdk} molecule object
  (\code{IAtomContainer}).

\code{consensus} returns a \code{compounds} object that is produced by merging multiple specified
  \code{compounds} objects.
}
\description{
Contains data for compound annotations for feature groups.
}
\details{
\code{compounds} objects are obtained from \link[=generateCompounds]{compound generators}. This class is derived from
the \code{\link{featureAnnotations}} class, please see its documentation for more methods and other details.
}
\section{Methods (by generic)}{
\itemize{
\item \code{defaultExclNormScores(compounds)}: Returns default scorings that are excluded from normalization.

\item \code{show(compounds)}: Show summary information for this object.

\item \code{identifiers(compounds)}: Returns a list containing for each feature group a
character vector with database identifiers for all candidate compounds. The
list is named by feature group names, and is typically used with the
\code{identifiers} option of \code{\link{generateCompoundsMetFrag}}.

\item \code{filter(compounds)}: Provides rule based filtering for generated compounds. Useful to eliminate unlikely candidates
and speed up further processing. Also see the \code{\link[=filter,featureAnnotations-method]{featureAnnotations}}
method.

\item \code{addFormulaScoring(compounds)}: Adds formula ranking data from a \code{\link{formulas}}
object as an extra compound candidate scoring (\code{formulaScore} column).
The formula score for each compound candidate is between \samp{0-1}, where
\emph{zero} means no match with any formula candidates, and \emph{one}
means that the compound candidate's formula is the highest ranked.

\item \code{getMCS(compounds)}: Calculates the maximum common substructure (MCS)
for two or more candidate structures for a feature group. This method uses
the \code{\link{get.mcs}} function from \CRANpkg{rcdk}.

\item \code{plotStructure(compounds)}: Plots a structure of a candidate compound using the
\CRANpkg{rcdk} package. If multiple candidates are specified (\emph{i.e.}
by specifying a \code{vector} for \code{index}) then the maximum common
substructure (MCS) of the selected candidates is drawn.

\item \code{plotScores(compounds)}: Plots a barplot with scoring of a candidate compound.

\item \code{annotatedPeakList(compounds)}: Returns an MS/MS peak list annotated with data from a
given candidate compound for a feature group.

\item \code{plotSpectrum(compounds)}: Plots an annotated spectrum for a given candidate compound for a feature group. Two spectra can
be compared by specifying a two-sized vector for the \code{index} and \code{groupName} arguments.

\item \code{consensus(compounds)}: Generates a consensus of results from multiple
objects. In order to rank the consensus candidates, first
each of the candidates are scored based on their original ranking
(the scores are normalized and the highest ranked candidate gets value
\samp{1}). The (weighted) mean is then calculated for all scorings of each
candidate to derive the final ranking (if an object lacks the candidate its
score will be \samp{0}). The original rankings for each object is stored in
the \code{rank} columns.

}}
\section{Slots}{

\describe{
\item{\code{setThreshold,setThresholdAnn}}{\setsWF A copy of the equally named arguments that were passed when this object
was created by \code{\link{generateCompounds}}.}

\item{\code{origFGNames}}{\setsWF The original (order of) names of the \code{\link{featureGroups}} object that was used to
create this object.}
}}

\note{
The values ranges in the \code{scoreLimits} slot, which are used for normalization of scores, are based on the
  \emph{original} scorings when the compounds were generated (\emph{prior} to employing the \code{topMost} filter to
  \code{\link{generateCompounds}}).
}
\section{S4 class hierarchy}{
 \itemize{   \item{\code{\link{featureAnnotations}}}   \itemize{     \item{\strong{\code{\link{compounds}}}}     \itemize{       \item{\code{\link{compoundsConsensus}}}       \item{\code{\link{compoundsMF}}}       \item{\code{\link{compoundsSet}}}       \itemize{         \item{\code{\link{compoundsConsensusSet}}}       }       \item{\code{\link{compoundsUnset}}}     }   } }
}

\section{Source}{
 Subscripting of formulae for plots generated by
  \code{plotSpectrum} is based on the \code{chemistry2expression} function
  from the \href{https://github.com/schymane/ReSOLUTION}{ReSOLUTION} package.
}

\section{Sets workflows}{
 \setsWFClass{compoundsSet}{compounds}

  \setsWFNewMethodsSO{compoundsUnset}{Only the annotation results that are present in the specified set are kept
  (based on the set consensus, see below for implications).}

  \setsWFChangedMethods{

  \item \code{filter} and the subset operator (\code{[}) Can be used to select data that is only present for selected
  sets. Depending on the \code{updateConsenus}, both either operate on set consensus or original data (see below for
  implications).

  \item \code{annotatedPeakList} Returns a combined annotation table with all sets.

  \item \code{plotSpectrum} Is able to highlight set specific mass peaks (\code{perSet} and \code{mirror} arguments).

  \item \code{consensus} Creates the algorithm consensus based on the original annotation data (see below for
  implications). Then, like the sets workflow method for \code{\link{generateCompounds}}, a consensus is made for all
  sets, which can be controlled with the \code{setThreshold} and \code{setThresholdAnn} arguments. The candidate
  coverage among the different algorithms is calculated for each set (\emph{e.g.} \code{coverage-positive} column)
  and for all sets (\code{coverage} column), which is based on the presence of a candidate in all the algorithms from
  all sets data. The \code{consensus} method for sets workflow data supports the \code{filterSets} argument. This
  controls how the algorithm consensus abundance filters (\code{absMinAbundance}/\code{relMinAbundance}) are applied:
  if \code{filterSets=TRUE} then the minimum of all \code{coverage} set specific columns is used to obtain the
  algorithm abundance. Otherwise the overall \code{coverage} column is used. For instance, consider a consensus
  object to be generated from two objects generated by different algorithms (\emph{e.g.} \command{SIRIUS} and
  \command{MetFrag}), which both have a positive and negative set. Then, if a candidate occurs with both
  algorithms for the positive mode set, but only with the first algorithm in the negative mode set,
  \code{relMinAbundance=1} will remove the candidate if \code{filterSets=TRUE} (because the minimum relative
  algorithm abundance is \samp{0.5}), while \code{filterSets=FALSE} will not remove the candidate (because based on
  all sets data the candidate occurs in both algorithms).

  \item \code{addFormulaScoring} Adds the formula scorings to the original data and re-creates the annotation set consensus (see below for implications).

  }

  Two types of annotation data are stored in a \code{compoundsSet} object: \enumerate{

  \item Annotations that are produced from a consensus between set results (see \code{generateCompounds}).

  \item The 'original' annotation data per set, prior to when the set consensus was made. This includes candidates
  that were filtered out because of the thresholds set by \code{setThreshold} and \code{setThresholdAnn}. However,
  when \code{filter} or subsetting (\code{[}) operations are performed, the original data is also updated.

  }

  In most cases the first data is used. However, in a few cases the original annotation data is used (as indicated
  above), for instance, to re-create the set consensus. It is important to realize that the original annotation data
  may have \emph{additional} candidates, and a newly created set consensus may therefore have 'new' candidates. For
  instance, when the object consists of the sets \code{"positive"} and \code{"negative"} and \code{setThreshold=1}
  was used to create it, then \code{compounds[, sets = "positive", updateConsensus = TRUE]} may now have additional
  candidates, \emph{i.e.} those that were not present in the \code{"negative"} set and were previously removed due to
  the consensus threshold filter.
}

\references{
\addCitations{rcdk}{1}
}
\seealso{
The \code{\link{featureAnnotations}} base class for more relevant methods and
  \code{\link{generateCompounds}}.
}
