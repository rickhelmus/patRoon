// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/patRoon.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// writeTraML
void writeTraML(const std::vector<std::string>& IDs, const std::string& out);
RcppExport SEXP _patRoon_writeTraML(SEXP IDsSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type IDs(IDsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type out(outSEXP);
    writeTraML(IDs, out);
    return R_NilValue;
END_RCPP
}
// writeChromsToMzML
void writeChromsToMzML(Rcpp::List EICs, const std::vector<std::string>& IDs, const std::string& out);
RcppExport SEXP _patRoon_writeChromsToMzML(SEXP EICsSEXP, SEXP IDsSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type EICs(EICsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type IDs(IDsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type out(outSEXP);
    writeChromsToMzML(EICs, IDs, out);
    return R_NilValue;
END_RCPP
}
// initBrukerLibrary
bool initBrukerLibrary(const std::string& path, bool force);
static SEXP _patRoon_initBrukerLibrary_try(SEXP pathSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(initBrukerLibrary(path, force));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _patRoon_initBrukerLibrary(SEXP pathSEXP, SEXP forceSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_patRoon_initBrukerLibrary_try(pathSEXP, forceSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// backendAvailable
bool backendAvailable(const std::string& b);
RcppExport SEXP _patRoon_backendAvailable(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(backendAvailable(b));
    return rcpp_result_gen;
END_RCPP
}
// walkSpectra
int walkSpectra(const MSReadBackend& backend);
RcppExport SEXP _patRoon_walkSpectra(SEXP backendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    rcpp_result_gen = Rcpp::wrap(walkSpectra(backend));
    return rcpp_result_gen;
END_RCPP
}
// getMSSpectrum
Rcpp::DataFrame getMSSpectrum(const MSReadBackend& backend, int index, int MSLevel, int frameIndex);
RcppExport SEXP _patRoon_getMSSpectrum(SEXP backendSEXP, SEXP indexSEXP, SEXP MSLevelSEXP, SEXP frameIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type MSLevel(MSLevelSEXP);
    Rcpp::traits::input_parameter< int >::type frameIndex(frameIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(getMSSpectrum(backend, index, MSLevel, frameIndex));
    return rcpp_result_gen;
END_RCPP
}
// getScans
Rcpp::DataFrame getScans(const MSReadBackend& backend, SpectrumRawTypes::Mass timeStart, SpectrumRawTypes::Mass timeEnd, int MSLevel, SpectrumRawTypes::Mass prec);
RcppExport SEXP _patRoon_getScans(SEXP backendSEXP, SEXP timeStartSEXP, SEXP timeEndSEXP, SEXP MSLevelSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type timeStart(timeStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type timeEnd(timeEndSEXP);
    Rcpp::traits::input_parameter< int >::type MSLevel(MSLevelSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(getScans(backend, timeStart, timeEnd, MSLevel, prec));
    return rcpp_result_gen;
END_RCPP
}
// getEICList
Rcpp::List getEICList(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Mass>& startMZs, const std::vector<SpectrumRawTypes::Mass>& endMZs, const std::vector<SpectrumRawTypes::Time>& startTimes, const std::vector<SpectrumRawTypes::Time>& endTimes, const std::vector<SpectrumRawTypes::Mobility>& startMobs, const std::vector<SpectrumRawTypes::Mobility>& endMobs, SpectrumRawTypes::Intensity minIntensityIMS, bool compress, bool withBP);
RcppExport SEXP _patRoon_getEICList(SEXP backendSEXP, SEXP startMZsSEXP, SEXP endMZsSEXP, SEXP startTimesSEXP, SEXP endTimesSEXP, SEXP startMobsSEXP, SEXP endMobsSEXP, SEXP minIntensityIMSSEXP, SEXP compressSEXP, SEXP withBPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type startMZs(startMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type endMZs(endMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type startTimes(startTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type endTimes(endTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type startMobs(startMobsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type endMobs(endMobsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< bool >::type compress(compressSEXP);
    Rcpp::traits::input_parameter< bool >::type withBP(withBPSEXP);
    rcpp_result_gen = Rcpp::wrap(getEICList(backend, startMZs, endMZs, startTimes, endTimes, startMobs, endMobs, minIntensityIMS, compress, withBP));
    return rcpp_result_gen;
END_RCPP
}
// getMSMetadata
Rcpp::DataFrame getMSMetadata(const MSReadBackend& backend, int msLevel);
RcppExport SEXP _patRoon_getMSMetadata(SEXP backendSEXP, SEXP msLevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< int >::type msLevel(msLevelSEXP);
    rcpp_result_gen = Rcpp::wrap(getMSMetadata(backend, msLevel));
    return rcpp_result_gen;
END_RCPP
}
// setSpecMetadata
void setSpecMetadata(MSReadBackend& backend, const Rcpp::DataFrame& mdMS, const Rcpp::DataFrame& mdMSMS);
RcppExport SEXP _patRoon_setSpecMetadata(SEXP backendSEXP, SEXP mdMSSEXP, SEXP mdMSMSSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type mdMS(mdMSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type mdMSMS(mdMSMSSEXP);
    setSpecMetadata(backend, mdMS, mdMSMS);
    return R_NilValue;
END_RCPP
}
// getMSPeakLists
Rcpp::List getMSPeakLists(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Time>& startTimes, const std::vector<SpectrumRawTypes::Time>& endTimes, const std::vector<SpectrumRawTypes::Mass>& precursorMZs, bool withPrecursor, bool retainPrecursor, int MSLevel, const std::string& method, SpectrumRawTypes::Mass mzWindow, const std::vector<SpectrumRawTypes::Mobility> startMobs, const std::vector<SpectrumRawTypes::Mobility> endMobs, SpectrumRawTypes::PeakAbundance minAbundance, unsigned topMost, SpectrumRawTypes::Intensity minIntensityIMS, SpectrumRawTypes::Intensity minIntensityPre, SpectrumRawTypes::Intensity minIntensityPost, SpectrumRawTypes::Intensity minBPIntensity);
RcppExport SEXP _patRoon_getMSPeakLists(SEXP backendSEXP, SEXP startTimesSEXP, SEXP endTimesSEXP, SEXP precursorMZsSEXP, SEXP withPrecursorSEXP, SEXP retainPrecursorSEXP, SEXP MSLevelSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP startMobsSEXP, SEXP endMobsSEXP, SEXP minAbundanceSEXP, SEXP topMostSEXP, SEXP minIntensityIMSSEXP, SEXP minIntensityPreSEXP, SEXP minIntensityPostSEXP, SEXP minBPIntensitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type startTimes(startTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type endTimes(endTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type precursorMZs(precursorMZsSEXP);
    Rcpp::traits::input_parameter< bool >::type withPrecursor(withPrecursorSEXP);
    Rcpp::traits::input_parameter< bool >::type retainPrecursor(retainPrecursorSEXP);
    Rcpp::traits::input_parameter< int >::type MSLevel(MSLevelSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility> >::type startMobs(startMobsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility> >::type endMobs(endMobsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundance(minAbundanceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPre(minIntensityPreSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPost(minIntensityPostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minBPIntensity(minBPIntensitySEXP);
    rcpp_result_gen = Rcpp::wrap(getMSPeakLists(backend, startTimes, endTimes, precursorMZs, withPrecursor, retainPrecursor, MSLevel, method, mzWindow, startMobs, endMobs, minAbundance, topMost, minIntensityIMS, minIntensityPre, minIntensityPost, minBPIntensity));
    return rcpp_result_gen;
END_RCPP
}
// getEIMList
Rcpp::List getEIMList(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Mass>& startMZs, const std::vector<SpectrumRawTypes::Mass>& endMZs, const std::vector<SpectrumRawTypes::Time>& startTimes, const std::vector<SpectrumRawTypes::Time>& endTimes, const std::vector<SpectrumRawTypes::Mobility>& startMobs, const std::vector<SpectrumRawTypes::Mobility>& endMobs, const std::string& method, SpectrumRawTypes::Mobility mobWindow, SpectrumRawTypes::Intensity minIntensity, bool compress);
RcppExport SEXP _patRoon_getEIMList(SEXP backendSEXP, SEXP startMZsSEXP, SEXP endMZsSEXP, SEXP startTimesSEXP, SEXP endTimesSEXP, SEXP startMobsSEXP, SEXP endMobsSEXP, SEXP methodSEXP, SEXP mobWindowSEXP, SEXP minIntensitySEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type startMZs(startMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type endMZs(endMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type startTimes(startTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type endTimes(endTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type startMobs(startMobsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type endMobs(endMobsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobWindow(mobWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(getEIMList(backend, startMZs, endMZs, startTimes, endTimes, startMobs, endMobs, method, mobWindow, minIntensity, compress));
    return rcpp_result_gen;
END_RCPP
}
// getPeakIntensities
Rcpp::NumericVector getPeakIntensities(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Mass>& startMZs, const std::vector<SpectrumRawTypes::Mass>& endMZs, const std::vector<SpectrumRawTypes::Time>& times);
RcppExport SEXP _patRoon_getPeakIntensities(SEXP backendSEXP, SEXP startMZsSEXP, SEXP endMZsSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type startMZs(startMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type endMZs(endMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(getPeakIntensities(backend, startMZs, endMZs, times));
    return rcpp_result_gen;
END_RCPP
}
// collapseIMSFrames
Rcpp::List collapseIMSFrames(const MSReadBackend& backend, SpectrumRawTypes::Mass mzStart, SpectrumRawTypes::Mass mzEnd, SpectrumRawTypes::Mobility mobilityStart, SpectrumRawTypes::Mobility mobilityEnd, const std::string& method, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::PeakAbundance minAbundance, unsigned topMost, SpectrumRawTypes::Intensity minIntensityIMS, SpectrumRawTypes::Intensity minIntensityPre);
RcppExport SEXP _patRoon_collapseIMSFrames(SEXP backendSEXP, SEXP mzStartSEXP, SEXP mzEndSEXP, SEXP mobilityStartSEXP, SEXP mobilityEndSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP minAbundanceSEXP, SEXP topMostSEXP, SEXP minIntensityIMSSEXP, SEXP minIntensityPreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzStart(mzStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzEnd(mzEndSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityStart(mobilityStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityEnd(mobilityEndSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundance(minAbundanceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPre(minIntensityPreSEXP);
    rcpp_result_gen = Rcpp::wrap(collapseIMSFrames(backend, mzStart, mzEnd, mobilityStart, mobilityEnd, method, mzWindow, minAbundance, topMost, minIntensityIMS, minIntensityPre));
    return rcpp_result_gen;
END_RCPP
}
// testMS1Writer
void testMS1Writer(const MSReadBackend& backend, const std::string& out, SpectrumRawTypes::Mass mzStart, SpectrumRawTypes::Mass mzEnd, SpectrumRawTypes::Mobility mobilityStart, SpectrumRawTypes::Mobility mobilityEnd, const std::string& method, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::PeakAbundance minAbundance, unsigned topMost, SpectrumRawTypes::Intensity minIntensityIMS, SpectrumRawTypes::Intensity minIntensityPre);
RcppExport SEXP _patRoon_testMS1Writer(SEXP backendSEXP, SEXP outSEXP, SEXP mzStartSEXP, SEXP mzEndSEXP, SEXP mobilityStartSEXP, SEXP mobilityEndSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP minAbundanceSEXP, SEXP topMostSEXP, SEXP minIntensityIMSSEXP, SEXP minIntensityPreSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type out(outSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzStart(mzStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzEnd(mzEndSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityStart(mobilityStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityEnd(mobilityEndSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundance(minAbundanceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPre(minIntensityPreSEXP);
    testMS1Writer(backend, out, mzStart, mzEnd, mobilityStart, mobilityEnd, method, mzWindow, minAbundance, topMost, minIntensityIMS, minIntensityPre);
    return R_NilValue;
END_RCPP
}
// readMSP
Rcpp::List readMSP(Rcpp::CharacterVector file, Rcpp::LogicalVector pc);
RcppExport SEXP _patRoon_readMSP(SEXP fileSEXP, SEXP pcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type pc(pcSEXP);
    rcpp_result_gen = Rcpp::wrap(readMSP(file, pc));
    return rcpp_result_gen;
END_RCPP
}
// writeMSPLibrary
void writeMSPLibrary(Rcpp::CharacterMatrix recordsM, Rcpp::List spectraList, Rcpp::CharacterVector outCV);
RcppExport SEXP _patRoon_writeMSPLibrary(SEXP recordsMSEXP, SEXP spectraListSEXP, SEXP outCVSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix >::type recordsM(recordsMSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type spectraList(spectraListSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type outCV(outCVSEXP);
    writeMSPLibrary(recordsM, spectraList, outCV);
    return R_NilValue;
END_RCPP
}
// readMoNAJSON
Rcpp::List readMoNAJSON(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_readMoNAJSON(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(readMoNAJSON(file));
    return rcpp_result_gen;
END_RCPP
}
// parseAdductConsXMLFile
Rcpp::List parseAdductConsXMLFile(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_parseAdductConsXMLFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(parseAdductConsXMLFile(file));
    return rcpp_result_gen;
END_RCPP
}
// parseFeatureXMLFile
Rcpp::DataFrame parseFeatureXMLFile(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_parseFeatureXMLFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFeatureXMLFile(file));
    return rcpp_result_gen;
END_RCPP
}
// parseFeatureMRMXMLFile
Rcpp::DataFrame parseFeatureMRMXMLFile(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_parseFeatureMRMXMLFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFeatureMRMXMLFile(file));
    return rcpp_result_gen;
END_RCPP
}
// parseFeatConsXMLFile
Rcpp::List parseFeatConsXMLFile(Rcpp::CharacterVector file, Rcpp::IntegerVector anaCount);
RcppExport SEXP _patRoon_parseFeatConsXMLFile(SEXP fileSEXP, SEXP anaCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type anaCount(anaCountSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFeatConsXMLFile(file, anaCount));
    return rcpp_result_gen;
END_RCPP
}
// writeFeatureXML
void writeFeatureXML(Rcpp::DataFrame featList, Rcpp::CharacterVector fPath, Rcpp::CharacterVector out, Rcpp::LogicalVector hulls);
RcppExport SEXP _patRoon_writeFeatureXML(SEXP featListSEXP, SEXP fPathSEXP, SEXP outSEXP, SEXP hullsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type featList(featListSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type fPath(fPathSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type hulls(hullsSEXP);
    writeFeatureXML(featList, fPath, out, hulls);
    return R_NilValue;
END_RCPP
}
// doFindPeaksDietrich
Rcpp::List doFindPeaksDietrich(Rcpp::List EICs, double minIntensity, int SN, double peakWidthMin, double peakWidthMax, double RTMin, double RTMax, int maxPeaksPerSignal, bool verbose);
RcppExport SEXP _patRoon_doFindPeaksDietrich(SEXP EICsSEXP, SEXP minIntensitySEXP, SEXP SNSEXP, SEXP peakWidthMinSEXP, SEXP peakWidthMaxSEXP, SEXP RTMinSEXP, SEXP RTMaxSEXP, SEXP maxPeaksPerSignalSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type EICs(EICsSEXP);
    Rcpp::traits::input_parameter< double >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< int >::type SN(SNSEXP);
    Rcpp::traits::input_parameter< double >::type peakWidthMin(peakWidthMinSEXP);
    Rcpp::traits::input_parameter< double >::type peakWidthMax(peakWidthMaxSEXP);
    Rcpp::traits::input_parameter< double >::type RTMin(RTMinSEXP);
    Rcpp::traits::input_parameter< double >::type RTMax(RTMaxSEXP);
    Rcpp::traits::input_parameter< int >::type maxPeaksPerSignal(maxPeaksPerSignalSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(doFindPeaksDietrich(EICs, minIntensity, SN, peakWidthMin, peakWidthMax, RTMin, RTMax, maxPeaksPerSignal, verbose));
    return rcpp_result_gen;
END_RCPP
}
// specDistMatrix
Rcpp::NumericMatrix specDistMatrix(Rcpp::List specList, Rcpp::CharacterVector method, Rcpp::CharacterVector shift, Rcpp::NumericVector precMZs, Rcpp::NumericVector mzWeight, Rcpp::NumericVector intWeight, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_specDistMatrix(SEXP specListSEXP, SEXP methodSEXP, SEXP shiftSEXP, SEXP precMZsSEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type specList(specListSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precMZs(precMZsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(specDistMatrix(specList, method, shift, precMZs, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// specDistRect
Rcpp::NumericMatrix specDistRect(Rcpp::List specList1, Rcpp::List specList2, Rcpp::CharacterVector method, Rcpp::CharacterVector shift, Rcpp::NumericVector precMZs1, Rcpp::NumericVector precMZs2, Rcpp::NumericVector mzWeight, Rcpp::NumericVector intWeight, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_specDistRect(SEXP specList1SEXP, SEXP specList2SEXP, SEXP methodSEXP, SEXP shiftSEXP, SEXP precMZs1SEXP, SEXP precMZs2SEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type specList1(specList1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type specList2(specList2SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precMZs1(precMZs1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precMZs2(precMZs2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(specDistRect(specList1, specList2, method, shift, precMZs1, precMZs2, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// testSpecFilter
Rcpp::DataFrame testSpecFilter(const std::vector<SpectrumRawTypes::Mass>& mzs, const std::vector<SpectrumRawTypes::Intensity>& ints, double mzMin, double mzMax, double minInt, unsigned topMost, double prec);
RcppExport SEXP _patRoon_testSpecFilter(SEXP mzsSEXP, SEXP intsSEXP, SEXP mzMinSEXP, SEXP mzMaxSEXP, SEXP minIntSEXP, SEXP topMostSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type mzs(mzsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Intensity>& >::type ints(intsSEXP);
    Rcpp::traits::input_parameter< double >::type mzMin(mzMinSEXP);
    Rcpp::traits::input_parameter< double >::type mzMax(mzMaxSEXP);
    Rcpp::traits::input_parameter< double >::type minInt(minIntSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(testSpecFilter(mzs, ints, mzMin, mzMax, minInt, topMost, prec));
    return rcpp_result_gen;
END_RCPP
}
// testClusterNums
Rcpp::DataFrame testClusterNums(const std::vector<double>& nums, const std::string& method, double window);
RcppExport SEXP _patRoon_testClusterNums(SEXP numsSEXP, SEXP methodSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(testClusterNums(nums, method, window));
    return rcpp_result_gen;
END_RCPP
}
// testClusterNums2
std::vector<double> testClusterNums2(const std::vector<double>& nums, const std::string& method, double window);
RcppExport SEXP _patRoon_testClusterNums2(SEXP numsSEXP, SEXP methodSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(testClusterNums2(nums, method, window));
    return rcpp_result_gen;
END_RCPP
}
// doAverageSpectra
Rcpp::DataFrame doAverageSpectra(Rcpp::List specs, const std::string& method, SpectrumRawTypes::Mass window, SpectrumRawTypes::Intensity minIntensity, SpectrumRawTypes::PeakAbundance minAbundance);
RcppExport SEXP _patRoon_doAverageSpectra(SEXP specsSEXP, SEXP methodSEXP, SEXP windowSEXP, SEXP minIntensitySEXP, SEXP minAbundanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type specs(specsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type window(windowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundance(minAbundanceSEXP);
    rcpp_result_gen = Rcpp::wrap(doAverageSpectra(specs, method, window, minIntensity, minAbundance));
    return rcpp_result_gen;
END_RCPP
}
// doAverageSpectraList
Rcpp::List doAverageSpectraList(Rcpp::List specsList, const std::string& method, SpectrumRawTypes::Mass window, SpectrumRawTypes::Intensity minIntensity, SpectrumRawTypes::PeakAbundance minAbundance);
RcppExport SEXP _patRoon_doAverageSpectraList(SEXP specsListSEXP, SEXP methodSEXP, SEXP windowSEXP, SEXP minIntensitySEXP, SEXP minAbundanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type specsList(specsListSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type window(windowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundance(minAbundanceSEXP);
    rcpp_result_gen = Rcpp::wrap(doAverageSpectraList(specsList, method, window, minIntensity, minAbundance));
    return rcpp_result_gen;
END_RCPP
}
// collapseTIMSFrame
Rcpp::DataFrame collapseTIMSFrame(const std::string& file, size_t frameID, const std::string& method, double mzWindow, double mzStart, double mzEnd, double mobilityStart, double mobilityEnd, unsigned minAbundance, unsigned topMost, unsigned minIntensity, unsigned minIntensityPost, Rcpp::Nullable<Rcpp::IntegerVector> scanStartsN, Rcpp::Nullable<Rcpp::IntegerVector> scanEndsN, double precursorMZ, bool onlyWithPrecursor, bool flatten);
RcppExport SEXP _patRoon_collapseTIMSFrame(SEXP fileSEXP, SEXP frameIDSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP mzStartSEXP, SEXP mzEndSEXP, SEXP mobilityStartSEXP, SEXP mobilityEndSEXP, SEXP minAbundanceSEXP, SEXP topMostSEXP, SEXP minIntensitySEXP, SEXP minIntensityPostSEXP, SEXP scanStartsNSEXP, SEXP scanEndsNSEXP, SEXP precursorMZSEXP, SEXP onlyWithPrecursorSEXP, SEXP flattenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< size_t >::type frameID(frameIDSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< double >::type mzStart(mzStartSEXP);
    Rcpp::traits::input_parameter< double >::type mzEnd(mzEndSEXP);
    Rcpp::traits::input_parameter< double >::type mobilityStart(mobilityStartSEXP);
    Rcpp::traits::input_parameter< double >::type mobilityEnd(mobilityEndSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minAbundance(minAbundanceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensityPost(minIntensityPostSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type scanStartsN(scanStartsNSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type scanEndsN(scanEndsNSEXP);
    Rcpp::traits::input_parameter< double >::type precursorMZ(precursorMZSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyWithPrecursor(onlyWithPrecursorSEXP);
    Rcpp::traits::input_parameter< bool >::type flatten(flattenSEXP);
    rcpp_result_gen = Rcpp::wrap(collapseTIMSFrame(file, frameID, method, mzWindow, mzStart, mzEnd, mobilityStart, mobilityEnd, minAbundance, topMost, minIntensity, minIntensityPost, scanStartsN, scanEndsN, precursorMZ, onlyWithPrecursor, flatten));
    return rcpp_result_gen;
END_RCPP
}
// getTIMSPeakLists
Rcpp::List getTIMSPeakLists(const std::string& file, Rcpp::List frameIDsList, const std::vector<double> precursorMZs, bool onlyWithPrecursor, const std::string& method, double mzWindow, unsigned minAbundance, unsigned topMost, unsigned minIntensityPre, unsigned minIntensityPost, unsigned minIntensityFinal, Rcpp::Nullable<Rcpp::NumericVector> mobilityStartsN, Rcpp::Nullable<Rcpp::NumericVector> mobilityEndsN, Rcpp::Nullable<Rcpp::List> scanStartsListN, Rcpp::Nullable<Rcpp::List> scanEndsListN);
RcppExport SEXP _patRoon_getTIMSPeakLists(SEXP fileSEXP, SEXP frameIDsListSEXP, SEXP precursorMZsSEXP, SEXP onlyWithPrecursorSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP minAbundanceSEXP, SEXP topMostSEXP, SEXP minIntensityPreSEXP, SEXP minIntensityPostSEXP, SEXP minIntensityFinalSEXP, SEXP mobilityStartsNSEXP, SEXP mobilityEndsNSEXP, SEXP scanStartsListNSEXP, SEXP scanEndsListNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type frameIDsList(frameIDsListSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type precursorMZs(precursorMZsSEXP);
    Rcpp::traits::input_parameter< bool >::type onlyWithPrecursor(onlyWithPrecursorSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minAbundance(minAbundanceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensityPre(minIntensityPreSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensityPost(minIntensityPostSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensityFinal(minIntensityFinalSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type mobilityStartsN(mobilityStartsNSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type mobilityEndsN(mobilityEndsNSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type scanStartsListN(scanStartsListNSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type scanEndsListN(scanEndsListNSEXP);
    rcpp_result_gen = Rcpp::wrap(getTIMSPeakLists(file, frameIDsList, precursorMZs, onlyWithPrecursor, method, mzWindow, minAbundance, topMost, minIntensityPre, minIntensityPost, minIntensityFinal, mobilityStartsN, mobilityEndsN, scanStartsListN, scanEndsListN));
    return rcpp_result_gen;
END_RCPP
}
// getTIMSEICs
Rcpp::List getTIMSEICs(const std::string& file, const std::vector<unsigned>& frameIDs, const std::vector<double>& mzStarts, const std::vector<double>& mzEnds, const std::vector<double>& mobilityStarts, const std::vector<double>& mobilityEnds, bool compress);
RcppExport SEXP _patRoon_getTIMSEICs(SEXP fileSEXP, SEXP frameIDsSEXP, SEXP mzStartsSEXP, SEXP mzEndsSEXP, SEXP mobilityStartsSEXP, SEXP mobilityEndsSEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type frameIDs(frameIDsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mzStarts(mzStartsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mzEnds(mzEndsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mobilityStarts(mobilityStartsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mobilityEnds(mobilityEndsSEXP);
    Rcpp::traits::input_parameter< bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(getTIMSEICs(file, frameIDs, mzStarts, mzEnds, mobilityStarts, mobilityEnds, compress));
    return rcpp_result_gen;
END_RCPP
}
// getTIMSMobilograms
Rcpp::List getTIMSMobilograms(const std::string& file, Rcpp::List frameIDsList, const std::vector<double>& mzStarts, const std::vector<double>& mzEnds, const std::string& method, double IMSWindow, unsigned minIntensity, bool compress);
RcppExport SEXP _patRoon_getTIMSMobilograms(SEXP fileSEXP, SEXP frameIDsListSEXP, SEXP mzStartsSEXP, SEXP mzEndsSEXP, SEXP methodSEXP, SEXP IMSWindowSEXP, SEXP minIntensitySEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type frameIDsList(frameIDsListSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mzStarts(mzStartsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mzEnds(mzEndsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type IMSWindow(IMSWindowSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(getTIMSMobilograms(file, frameIDsList, mzStarts, mzEnds, method, IMSWindow, minIntensity, compress));
    return rcpp_result_gen;
END_RCPP
}
// collapseTIMSSpectra
Rcpp::List collapseTIMSSpectra(const std::string& file, const std::vector<unsigned>& frameIDs, double mzStart, double mzEnd, double mobilityStart, double mobilityEnd, const std::string& method, double mzWindow, unsigned minAbundance, unsigned topMost, unsigned minIntensityPre, unsigned minIntensityPost);
RcppExport SEXP _patRoon_collapseTIMSSpectra(SEXP fileSEXP, SEXP frameIDsSEXP, SEXP mzStartSEXP, SEXP mzEndSEXP, SEXP mobilityStartSEXP, SEXP mobilityEndSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP minAbundanceSEXP, SEXP topMostSEXP, SEXP minIntensityPreSEXP, SEXP minIntensityPostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type frameIDs(frameIDsSEXP);
    Rcpp::traits::input_parameter< double >::type mzStart(mzStartSEXP);
    Rcpp::traits::input_parameter< double >::type mzEnd(mzEndSEXP);
    Rcpp::traits::input_parameter< double >::type mobilityStart(mobilityStartSEXP);
    Rcpp::traits::input_parameter< double >::type mobilityEnd(mobilityEndSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minAbundance(minAbundanceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensityPre(minIntensityPreSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minIntensityPost(minIntensityPostSEXP);
    rcpp_result_gen = Rcpp::wrap(collapseTIMSSpectra(file, frameIDs, mzStart, mzEnd, mobilityStart, mobilityEnd, method, mzWindow, minAbundance, topMost, minIntensityPre, minIntensityPost));
    return rcpp_result_gen;
END_RCPP
}
// loadEICIntensities
Rcpp::NumericVector loadEICIntensities(Rcpp::List spectra, Rcpp::DataFrame featList, Rcpp::NumericVector rtWindow);
RcppExport SEXP _patRoon_loadEICIntensities(SEXP spectraSEXP, SEXP featListSEXP, SEXP rtWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type featList(featListSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rtWindow(rtWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(loadEICIntensities(spectra, featList, rtWindow));
    return rcpp_result_gen;
END_RCPP
}
// loadEICs
Rcpp::List loadEICs(Rcpp::List spectra, Rcpp::NumericVector rtMins, Rcpp::NumericVector rtMaxs, Rcpp::NumericVector mzMins, Rcpp::NumericVector mzMaxs);
RcppExport SEXP _patRoon_loadEICs(SEXP spectraSEXP, SEXP rtMinsSEXP, SEXP rtMaxsSEXP, SEXP mzMinsSEXP, SEXP mzMaxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rtMins(rtMinsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rtMaxs(rtMaxsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzMins(mzMinsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzMaxs(mzMaxsSEXP);
    rcpp_result_gen = Rcpp::wrap(loadEICs(spectra, rtMins, rtMaxs, mzMins, mzMaxs));
    return rcpp_result_gen;
END_RCPP
}
// makeSAFDInput
Rcpp::List makeSAFDInput(Rcpp::List spectra, Rcpp::NumericVector mzRange);
RcppExport SEXP _patRoon_makeSAFDInput(SEXP spectraSEXP, SEXP mzRangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzRange(mzRangeSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSAFDInput(spectra, mzRange));
    return rcpp_result_gen;
END_RCPP
}
// binSpectra
Rcpp::DataFrame binSpectra(Rcpp::DataFrame sp1, Rcpp::DataFrame sp2, Rcpp::CharacterVector shift, Rcpp::NumericVector precDiff, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_binSpectra(SEXP sp1SEXP, SEXP sp2SEXP, SEXP shiftSEXP, SEXP precDiffSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp1(sp1SEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp2(sp2SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precDiff(precDiffSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(binSpectra(sp1, sp2, shift, precDiff, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// calcSpecSimilarity
Rcpp::NumericVector calcSpecSimilarity(Rcpp::DataFrame sp1, Rcpp::DataFrame sp2, Rcpp::CharacterVector method, Rcpp::CharacterVector shift, Rcpp::NumericVector precDiff, Rcpp::NumericVector mzWeight, Rcpp::NumericVector intWeight, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_calcSpecSimilarity(SEXP sp1SEXP, SEXP sp2SEXP, SEXP methodSEXP, SEXP shiftSEXP, SEXP precDiffSEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp1(sp1SEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp2(sp2SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precDiff(precDiffSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(calcSpecSimilarity(sp1, sp2, method, shift, precDiff, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// calcAnnSims
std::vector<double> calcAnnSims(Rcpp::DataFrame spectrum, Rcpp::List annotatedInds, const std::string& method, double mzWeight, double intWeight, double mzWindow);
RcppExport SEXP _patRoon_calcAnnSims(SEXP spectrumSEXP, SEXP annotatedIndsSEXP, SEXP methodSEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type spectrum(spectrumSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type annotatedInds(annotatedIndsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< double >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< double >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(calcAnnSims(spectrum, annotatedInds, method, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// addFilesToOpenMSIni
void addFilesToOpenMSIni(const std::string& file, const std::vector<std::string>& inFiles, const std::vector<std::string>& outFiles);
RcppExport SEXP _patRoon_addFilesToOpenMSIni(SEXP fileSEXP, SEXP inFilesSEXP, SEXP outFilesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type inFiles(inFilesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type outFiles(outFilesSEXP);
    addFilesToOpenMSIni(file, inFiles, outFiles);
    return R_NilValue;
END_RCPP
}
// getOMPMaxNumThreads
int getOMPMaxNumThreads();
RcppExport SEXP _patRoon_getOMPMaxNumThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getOMPMaxNumThreads());
    return rcpp_result_gen;
END_RCPP
}
// setOMPNumThreads
void setOMPNumThreads(int n);
RcppExport SEXP _patRoon_setOMPNumThreads(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    setOMPNumThreads(n);
    return R_NilValue;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _patRoon_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("bool(*initBrukerLibrary)(const std::string&,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _patRoon_RcppExport_registerCCallable() { 
    R_RegisterCCallable("patRoon", "_patRoon_initBrukerLibrary", (DL_FUNC)_patRoon_initBrukerLibrary_try);
    R_RegisterCCallable("patRoon", "_patRoon_RcppExport_validate", (DL_FUNC)_patRoon_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP _rcpp_module_boot_MSReadBackend();

static const R_CallMethodDef CallEntries[] = {
    {"_patRoon_writeTraML", (DL_FUNC) &_patRoon_writeTraML, 2},
    {"_patRoon_writeChromsToMzML", (DL_FUNC) &_patRoon_writeChromsToMzML, 3},
    {"_patRoon_initBrukerLibrary", (DL_FUNC) &_patRoon_initBrukerLibrary, 2},
    {"_patRoon_backendAvailable", (DL_FUNC) &_patRoon_backendAvailable, 1},
    {"_patRoon_walkSpectra", (DL_FUNC) &_patRoon_walkSpectra, 1},
    {"_patRoon_getMSSpectrum", (DL_FUNC) &_patRoon_getMSSpectrum, 4},
    {"_patRoon_getScans", (DL_FUNC) &_patRoon_getScans, 5},
    {"_patRoon_getEICList", (DL_FUNC) &_patRoon_getEICList, 10},
    {"_patRoon_getMSMetadata", (DL_FUNC) &_patRoon_getMSMetadata, 2},
    {"_patRoon_setSpecMetadata", (DL_FUNC) &_patRoon_setSpecMetadata, 3},
    {"_patRoon_getMSPeakLists", (DL_FUNC) &_patRoon_getMSPeakLists, 17},
    {"_patRoon_getEIMList", (DL_FUNC) &_patRoon_getEIMList, 11},
    {"_patRoon_getPeakIntensities", (DL_FUNC) &_patRoon_getPeakIntensities, 4},
    {"_patRoon_collapseIMSFrames", (DL_FUNC) &_patRoon_collapseIMSFrames, 11},
    {"_patRoon_testMS1Writer", (DL_FUNC) &_patRoon_testMS1Writer, 12},
    {"_patRoon_readMSP", (DL_FUNC) &_patRoon_readMSP, 2},
    {"_patRoon_writeMSPLibrary", (DL_FUNC) &_patRoon_writeMSPLibrary, 3},
    {"_patRoon_readMoNAJSON", (DL_FUNC) &_patRoon_readMoNAJSON, 1},
    {"_patRoon_parseAdductConsXMLFile", (DL_FUNC) &_patRoon_parseAdductConsXMLFile, 1},
    {"_patRoon_parseFeatureXMLFile", (DL_FUNC) &_patRoon_parseFeatureXMLFile, 1},
    {"_patRoon_parseFeatureMRMXMLFile", (DL_FUNC) &_patRoon_parseFeatureMRMXMLFile, 1},
    {"_patRoon_parseFeatConsXMLFile", (DL_FUNC) &_patRoon_parseFeatConsXMLFile, 2},
    {"_patRoon_writeFeatureXML", (DL_FUNC) &_patRoon_writeFeatureXML, 4},
    {"_patRoon_doFindPeaksDietrich", (DL_FUNC) &_patRoon_doFindPeaksDietrich, 9},
    {"_patRoon_specDistMatrix", (DL_FUNC) &_patRoon_specDistMatrix, 7},
    {"_patRoon_specDistRect", (DL_FUNC) &_patRoon_specDistRect, 9},
    {"_patRoon_testSpecFilter", (DL_FUNC) &_patRoon_testSpecFilter, 7},
    {"_patRoon_testClusterNums", (DL_FUNC) &_patRoon_testClusterNums, 3},
    {"_patRoon_testClusterNums2", (DL_FUNC) &_patRoon_testClusterNums2, 3},
    {"_patRoon_doAverageSpectra", (DL_FUNC) &_patRoon_doAverageSpectra, 5},
    {"_patRoon_doAverageSpectraList", (DL_FUNC) &_patRoon_doAverageSpectraList, 5},
    {"_patRoon_collapseTIMSFrame", (DL_FUNC) &_patRoon_collapseTIMSFrame, 17},
    {"_patRoon_getTIMSPeakLists", (DL_FUNC) &_patRoon_getTIMSPeakLists, 15},
    {"_patRoon_getTIMSEICs", (DL_FUNC) &_patRoon_getTIMSEICs, 7},
    {"_patRoon_getTIMSMobilograms", (DL_FUNC) &_patRoon_getTIMSMobilograms, 8},
    {"_patRoon_collapseTIMSSpectra", (DL_FUNC) &_patRoon_collapseTIMSSpectra, 12},
    {"_patRoon_loadEICIntensities", (DL_FUNC) &_patRoon_loadEICIntensities, 3},
    {"_patRoon_loadEICs", (DL_FUNC) &_patRoon_loadEICs, 5},
    {"_patRoon_makeSAFDInput", (DL_FUNC) &_patRoon_makeSAFDInput, 2},
    {"_patRoon_binSpectra", (DL_FUNC) &_patRoon_binSpectra, 5},
    {"_patRoon_calcSpecSimilarity", (DL_FUNC) &_patRoon_calcSpecSimilarity, 8},
    {"_patRoon_calcAnnSims", (DL_FUNC) &_patRoon_calcAnnSims, 6},
    {"_patRoon_addFilesToOpenMSIni", (DL_FUNC) &_patRoon_addFilesToOpenMSIni, 3},
    {"_patRoon_getOMPMaxNumThreads", (DL_FUNC) &_patRoon_getOMPMaxNumThreads, 0},
    {"_patRoon_setOMPNumThreads", (DL_FUNC) &_patRoon_setOMPNumThreads, 1},
    {"_rcpp_module_boot_MSReadBackend", (DL_FUNC) &_rcpp_module_boot_MSReadBackend, 0},
    {"_patRoon_RcppExport_registerCCallable", (DL_FUNC) &_patRoon_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_patRoon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
