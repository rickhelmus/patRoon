// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/patRoon.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// writeTraML
void writeTraML(const std::vector<std::string>& IDs, const std::string& out);
RcppExport SEXP _patRoon_writeTraML(SEXP IDsSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type IDs(IDsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type out(outSEXP);
    writeTraML(IDs, out);
    return R_NilValue;
END_RCPP
}
// writeChromsToMzML
void writeChromsToMzML(Rcpp::List EICs, bool fillEICs, const std::vector<std::string>& IDs, const std::string& out);
RcppExport SEXP _patRoon_writeChromsToMzML(SEXP EICsSEXP, SEXP fillEICsSEXP, SEXP IDsSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type EICs(EICsSEXP);
    Rcpp::traits::input_parameter< bool >::type fillEICs(fillEICsSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type IDs(IDsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type out(outSEXP);
    writeChromsToMzML(EICs, fillEICs, IDs, out);
    return R_NilValue;
END_RCPP
}
// getGroupIDs
Rcpp::IntegerVector getGroupIDs(const Rcpp::NumericVector& featRTs, const Rcpp::NumericVector& featMZs, const Rcpp::NumericVector& featMobs, const Rcpp::NumericVector& ints, const Rcpp::IntegerVector& anaIDs, const Rcpp::IntegerVector& repIDs, double rtWindow, double mzWindow, double mobWindow, const Rcpp::List& weightsList);
RcppExport SEXP _patRoon_getGroupIDs(SEXP featRTsSEXP, SEXP featMZsSEXP, SEXP featMobsSEXP, SEXP intsSEXP, SEXP anaIDsSEXP, SEXP repIDsSEXP, SEXP rtWindowSEXP, SEXP mzWindowSEXP, SEXP mobWindowSEXP, SEXP weightsListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type featRTs(featRTsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type featMZs(featMZsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type featMobs(featMobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type ints(intsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type anaIDs(anaIDsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type repIDs(repIDsSEXP);
    Rcpp::traits::input_parameter< double >::type rtWindow(rtWindowSEXP);
    Rcpp::traits::input_parameter< double >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< double >::type mobWindow(mobWindowSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weightsList(weightsListSEXP);
    rcpp_result_gen = Rcpp::wrap(getGroupIDs(featRTs, featMZs, featMobs, ints, anaIDs, repIDs, rtWindow, mzWindow, mobWindow, weightsList));
    return rcpp_result_gen;
END_RCPP
}
// initBrukerLibrary
bool initBrukerLibrary(const std::string& path, bool force);
static SEXP _patRoon_initBrukerLibrary_try(SEXP pathSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type force(forceSEXP);
    rcpp_result_gen = Rcpp::wrap(initBrukerLibrary(path, force));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _patRoon_initBrukerLibrary(SEXP pathSEXP, SEXP forceSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_patRoon_initBrukerLibrary_try(pathSEXP, forceSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getBrukerCCS
Rcpp::NumericVector getBrukerCCS(Rcpp::NumericVector mobs, Rcpp::IntegerVector charges, Rcpp::NumericVector mzs);
static SEXP _patRoon_getBrukerCCS_try(SEXP mobsSEXP, SEXP chargesSEXP, SEXP mzsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mobs(mobsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type charges(chargesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzs(mzsSEXP);
    rcpp_result_gen = Rcpp::wrap(getBrukerCCS(mobs, charges, mzs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _patRoon_getBrukerCCS(SEXP mobsSEXP, SEXP chargesSEXP, SEXP mzsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_patRoon_getBrukerCCS_try(mobsSEXP, chargesSEXP, mzsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getBrukerMob
Rcpp::NumericVector getBrukerMob(Rcpp::NumericVector ccss, Rcpp::IntegerVector charges, Rcpp::NumericVector mzs);
static SEXP _patRoon_getBrukerMob_try(SEXP ccssSEXP, SEXP chargesSEXP, SEXP mzsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ccss(ccssSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type charges(chargesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzs(mzsSEXP);
    rcpp_result_gen = Rcpp::wrap(getBrukerMob(ccss, charges, mzs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _patRoon_getBrukerMob(SEXP ccssSEXP, SEXP chargesSEXP, SEXP mzsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_patRoon_getBrukerMob_try(ccssSEXP, chargesSEXP, mzsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// backendAvailable
bool backendAvailable(const std::string& b);
RcppExport SEXP _patRoon_backendAvailable(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(backendAvailable(b));
    return rcpp_result_gen;
END_RCPP
}
// walkSpectra
int walkSpectra(const MSReadBackend& backend);
RcppExport SEXP _patRoon_walkSpectra(SEXP backendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    rcpp_result_gen = Rcpp::wrap(walkSpectra(backend));
    return rcpp_result_gen;
END_RCPP
}
// getMSSpectrum
Rcpp::DataFrame getMSSpectrum(const MSReadBackend& backend, int index, int MSLevel, int frameIndex);
RcppExport SEXP _patRoon_getMSSpectrum(SEXP backendSEXP, SEXP indexSEXP, SEXP MSLevelSEXP, SEXP frameIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type MSLevel(MSLevelSEXP);
    Rcpp::traits::input_parameter< int >::type frameIndex(frameIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(getMSSpectrum(backend, index, MSLevel, frameIndex));
    return rcpp_result_gen;
END_RCPP
}
// getCollapsedFrame
Rcpp::DataFrame getCollapsedFrame(const MSReadBackend& backend, int index, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::Intensity minIntensityIMS, SpectrumRawTypes::Intensity minIntensityPre, SpectrumRawTypes::PeakAbundance minAbundanceRel, SpectrumRawTypes::PeakAbundance minAbundanceAbs, const std::string& method);
RcppExport SEXP _patRoon_getCollapsedFrame(SEXP backendSEXP, SEXP indexSEXP, SEXP mzWindowSEXP, SEXP minIntensityIMSSEXP, SEXP minIntensityPreSEXP, SEXP minAbundanceRelSEXP, SEXP minAbundanceAbsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPre(minIntensityPreSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceRel(minAbundanceRelSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceAbs(minAbundanceAbsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(getCollapsedFrame(backend, index, mzWindow, minIntensityIMS, minIntensityPre, minAbundanceRel, minAbundanceAbs, method));
    return rcpp_result_gen;
END_RCPP
}
// getCentroidedFrame
Rcpp::DataFrame getCentroidedFrame(const MSReadBackend& backend, int index, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::Mobility mobWindow, SpectrumRawTypes::Intensity minIntensity, const std::string& method);
RcppExport SEXP _patRoon_getCentroidedFrame(SEXP backendSEXP, SEXP indexSEXP, SEXP mzWindowSEXP, SEXP mobWindowSEXP, SEXP minIntensitySEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobWindow(mobWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(getCentroidedFrame(backend, index, mzWindow, mobWindow, minIntensity, method));
    return rcpp_result_gen;
END_RCPP
}
// getScans
Rcpp::DataFrame getScans(const MSReadBackend& backend, SpectrumRawTypes::Time timeStart, SpectrumRawTypes::Time timeEnd, int MSLevel, SpectrumRawTypes::Mass prec, SpectrumRawTypes::Mass fixedIsoWidth);
RcppExport SEXP _patRoon_getScans(SEXP backendSEXP, SEXP timeStartSEXP, SEXP timeEndSEXP, SEXP MSLevelSEXP, SEXP precSEXP, SEXP fixedIsoWidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Time >::type timeStart(timeStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Time >::type timeEnd(timeEndSEXP);
    Rcpp::traits::input_parameter< int >::type MSLevel(MSLevelSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type prec(precSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type fixedIsoWidth(fixedIsoWidthSEXP);
    rcpp_result_gen = Rcpp::wrap(getScans(backend, timeStart, timeEnd, MSLevel, prec, fixedIsoWidth));
    return rcpp_result_gen;
END_RCPP
}
// getEICList
Rcpp::List getEICList(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Mass>& startMZs, const std::vector<SpectrumRawTypes::Mass>& endMZs, const std::vector<SpectrumRawTypes::Time>& startTimes, const std::vector<SpectrumRawTypes::Time>& endTimes, const std::vector<SpectrumRawTypes::Mobility>& startMobs, const std::vector<SpectrumRawTypes::Mobility>& endMobs, SpectrumRawTypes::Time gapFactor, SpectrumRawTypes::Mass mzExpIMSWindow, SpectrumRawTypes::Intensity minIntensityIMS, const std::string& mode, SpectrumRawTypes::Intensity minEICIntensity, SpectrumRawTypes::Time minEICAdjTime, unsigned minEICAdjPoints, SpectrumRawTypes::Intensity minEICAdjIntensity, unsigned topMost);
RcppExport SEXP _patRoon_getEICList(SEXP backendSEXP, SEXP startMZsSEXP, SEXP endMZsSEXP, SEXP startTimesSEXP, SEXP endTimesSEXP, SEXP startMobsSEXP, SEXP endMobsSEXP, SEXP gapFactorSEXP, SEXP mzExpIMSWindowSEXP, SEXP minIntensityIMSSEXP, SEXP modeSEXP, SEXP minEICIntensitySEXP, SEXP minEICAdjTimeSEXP, SEXP minEICAdjPointsSEXP, SEXP minEICAdjIntensitySEXP, SEXP topMostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type startMZs(startMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type endMZs(endMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type startTimes(startTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type endTimes(endTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type startMobs(startMobsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type endMobs(endMobsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Time >::type gapFactor(gapFactorSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzExpIMSWindow(mzExpIMSWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minEICIntensity(minEICIntensitySEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Time >::type minEICAdjTime(minEICAdjTimeSEXP);
    Rcpp::traits::input_parameter< unsigned >::type minEICAdjPoints(minEICAdjPointsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minEICAdjIntensity(minEICAdjIntensitySEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    rcpp_result_gen = Rcpp::wrap(getEICList(backend, startMZs, endMZs, startTimes, endTimes, startMobs, endMobs, gapFactor, mzExpIMSWindow, minIntensityIMS, mode, minEICIntensity, minEICAdjTime, minEICAdjPoints, minEICAdjIntensity, topMost));
    return rcpp_result_gen;
END_RCPP
}
// doFillEIXIntensities
std::vector<SpectrumRawTypes::Intensity> doFillEIXIntensities(const std::vector<SpectrumRawTypes::Time>& allXValues, const std::vector<SpectrumRawTypes::Time>& xvalues, const std::vector<SpectrumRawTypes::Intensity>& intensities);
RcppExport SEXP _patRoon_doFillEIXIntensities(SEXP allXValuesSEXP, SEXP xvaluesSEXP, SEXP intensitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type allXValues(allXValuesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type xvalues(xvaluesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Intensity>& >::type intensities(intensitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(doFillEIXIntensities(allXValues, xvalues, intensities));
    return rcpp_result_gen;
END_RCPP
}
// padEIX
Rcpp::List padEIX(const std::vector<SpectrumRawTypes::Time>& allXValues, SpectrumRawTypes::Time startX, SpectrumRawTypes::Time endX, const std::vector<SpectrumRawTypes::Time>& xvalues, const std::vector<SpectrumRawTypes::Intensity>& intensities);
RcppExport SEXP _patRoon_padEIX(SEXP allXValuesSEXP, SEXP startXSEXP, SEXP endXSEXP, SEXP xvaluesSEXP, SEXP intensitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type allXValues(allXValuesSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Time >::type startX(startXSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Time >::type endX(endXSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type xvalues(xvaluesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Intensity>& >::type intensities(intensitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(padEIX(allXValues, startX, endX, xvalues, intensities));
    return rcpp_result_gen;
END_RCPP
}
// getMSMetadata
Rcpp::DataFrame getMSMetadata(const MSReadBackend& backend, int msLevel);
RcppExport SEXP _patRoon_getMSMetadata(SEXP backendSEXP, SEXP msLevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< int >::type msLevel(msLevelSEXP);
    rcpp_result_gen = Rcpp::wrap(getMSMetadata(backend, msLevel));
    return rcpp_result_gen;
END_RCPP
}
// setSpecMetadata
void setSpecMetadata(MSReadBackend& backend, const Rcpp::DataFrame& mdMS, const Rcpp::DataFrame& mdMSMS);
RcppExport SEXP _patRoon_setSpecMetadata(SEXP backendSEXP, SEXP mdMSSEXP, SEXP mdMSMSSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type mdMS(mdMSSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type mdMSMS(mdMSMSSEXP);
    setSpecMetadata(backend, mdMS, mdMSMS);
    return R_NilValue;
END_RCPP
}
// getMSPeakLists
Rcpp::List getMSPeakLists(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Time>& startTimes, const std::vector<SpectrumRawTypes::Time>& endTimes, const std::vector<SpectrumRawTypes::Mass>& precursorMZs, SpectrumRawTypes::Mass fixedIsolationWidth, bool withPrecursor, bool retainPrecursor, int MSLevel, const std::string& method, SpectrumRawTypes::Mass mzWindow, const std::vector<SpectrumRawTypes::Mobility> startMobs, const std::vector<SpectrumRawTypes::Mobility> endMobs, SpectrumRawTypes::PeakAbundance minAbundanceRel, SpectrumRawTypes::PeakAbundance minAbundanceAbs, SpectrumRawTypes::PeakAbundance minAbundanceIMSRel, SpectrumRawTypes::PeakAbundance minAbundanceIMSAbs, unsigned topMost, SpectrumRawTypes::Intensity minIntensityIMS, SpectrumRawTypes::Intensity minIntensityPre, SpectrumRawTypes::Intensity minIntensityPost, SpectrumRawTypes::Intensity minBPIntensity);
RcppExport SEXP _patRoon_getMSPeakLists(SEXP backendSEXP, SEXP startTimesSEXP, SEXP endTimesSEXP, SEXP precursorMZsSEXP, SEXP fixedIsolationWidthSEXP, SEXP withPrecursorSEXP, SEXP retainPrecursorSEXP, SEXP MSLevelSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP startMobsSEXP, SEXP endMobsSEXP, SEXP minAbundanceRelSEXP, SEXP minAbundanceAbsSEXP, SEXP minAbundanceIMSRelSEXP, SEXP minAbundanceIMSAbsSEXP, SEXP topMostSEXP, SEXP minIntensityIMSSEXP, SEXP minIntensityPreSEXP, SEXP minIntensityPostSEXP, SEXP minBPIntensitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type startTimes(startTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type endTimes(endTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type precursorMZs(precursorMZsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type fixedIsolationWidth(fixedIsolationWidthSEXP);
    Rcpp::traits::input_parameter< bool >::type withPrecursor(withPrecursorSEXP);
    Rcpp::traits::input_parameter< bool >::type retainPrecursor(retainPrecursorSEXP);
    Rcpp::traits::input_parameter< int >::type MSLevel(MSLevelSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility> >::type startMobs(startMobsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility> >::type endMobs(endMobsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceRel(minAbundanceRelSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceAbs(minAbundanceAbsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceIMSRel(minAbundanceIMSRelSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceIMSAbs(minAbundanceIMSAbsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPre(minIntensityPreSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPost(minIntensityPostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minBPIntensity(minBPIntensitySEXP);
    rcpp_result_gen = Rcpp::wrap(getMSPeakLists(backend, startTimes, endTimes, precursorMZs, fixedIsolationWidth, withPrecursor, retainPrecursor, MSLevel, method, mzWindow, startMobs, endMobs, minAbundanceRel, minAbundanceAbs, minAbundanceIMSRel, minAbundanceIMSAbs, topMost, minIntensityIMS, minIntensityPre, minIntensityPost, minBPIntensity));
    return rcpp_result_gen;
END_RCPP
}
// getEIMList
Rcpp::List getEIMList(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Mass>& startMZs, const std::vector<SpectrumRawTypes::Mass>& endMZs, const std::vector<SpectrumRawTypes::Time>& startTimes, const std::vector<SpectrumRawTypes::Time>& endTimes, const std::vector<SpectrumRawTypes::Mobility>& startMobs, const std::vector<SpectrumRawTypes::Mobility>& endMobs, SpectrumRawTypes::Intensity minIntensity, SpectrumRawTypes::Mass mzExpIMSWindow, bool compress);
RcppExport SEXP _patRoon_getEIMList(SEXP backendSEXP, SEXP startMZsSEXP, SEXP endMZsSEXP, SEXP startTimesSEXP, SEXP endTimesSEXP, SEXP startMobsSEXP, SEXP endMobsSEXP, SEXP minIntensitySEXP, SEXP mzExpIMSWindowSEXP, SEXP compressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type startMZs(startMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type endMZs(endMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type startTimes(startTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type endTimes(endTimesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type startMobs(startMobsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type endMobs(endMobsSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzExpIMSWindow(mzExpIMSWindowSEXP);
    Rcpp::traits::input_parameter< bool >::type compress(compressSEXP);
    rcpp_result_gen = Rcpp::wrap(getEIMList(backend, startMZs, endMZs, startTimes, endTimes, startMobs, endMobs, minIntensity, mzExpIMSWindow, compress));
    return rcpp_result_gen;
END_RCPP
}
// compressEIM
Rcpp::List compressEIM(const std::vector<SpectrumRawTypes::Mobility>& mobilities, const std::vector<SpectrumRawTypes::Intensity>& intensities);
RcppExport SEXP _patRoon_compressEIM(SEXP mobilitiesSEXP, SEXP intensitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mobility>& >::type mobilities(mobilitiesSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Intensity>& >::type intensities(intensitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(compressEIM(mobilities, intensities));
    return rcpp_result_gen;
END_RCPP
}
// getPeakIntensities
Rcpp::NumericVector getPeakIntensities(const MSReadBackend& backend, const std::vector<SpectrumRawTypes::Mass>& startMZs, const std::vector<SpectrumRawTypes::Mass>& endMZs, const std::vector<SpectrumRawTypes::Time>& times);
RcppExport SEXP _patRoon_getPeakIntensities(SEXP backendSEXP, SEXP startMZsSEXP, SEXP endMZsSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type startMZs(startMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type endMZs(endMZsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Time>& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(getPeakIntensities(backend, startMZs, endMZs, times));
    return rcpp_result_gen;
END_RCPP
}
// collapseIMSFrames
Rcpp::List collapseIMSFrames(const MSReadBackend& backend, SpectrumRawTypes::Mass mzStart, SpectrumRawTypes::Mass mzEnd, SpectrumRawTypes::Mobility mobilityStart, SpectrumRawTypes::Mobility mobilityEnd, const std::string& method, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::PeakAbundance minAbundanceRel, SpectrumRawTypes::PeakAbundance minAbundanceAbs, unsigned topMost, SpectrumRawTypes::Intensity minIntensityIMS, SpectrumRawTypes::Intensity minIntensityPre, bool includeMSMS);
RcppExport SEXP _patRoon_collapseIMSFrames(SEXP backendSEXP, SEXP mzStartSEXP, SEXP mzEndSEXP, SEXP mobilityStartSEXP, SEXP mobilityEndSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP minAbundanceRelSEXP, SEXP minAbundanceAbsSEXP, SEXP topMostSEXP, SEXP minIntensityIMSSEXP, SEXP minIntensityPreSEXP, SEXP includeMSMSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzStart(mzStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzEnd(mzEndSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityStart(mobilityStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityEnd(mobilityEndSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceRel(minAbundanceRelSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceAbs(minAbundanceAbsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPre(minIntensityPreSEXP);
    Rcpp::traits::input_parameter< bool >::type includeMSMS(includeMSMSSEXP);
    rcpp_result_gen = Rcpp::wrap(collapseIMSFrames(backend, mzStart, mzEnd, mobilityStart, mobilityEnd, method, mzWindow, minAbundanceRel, minAbundanceAbs, topMost, minIntensityIMS, minIntensityPre, includeMSMS));
    return rcpp_result_gen;
END_RCPP
}
// getIsolationMZs
Rcpp::List getIsolationMZs(const MSReadBackend& backend, const std::string& method, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::Intensity minTIC);
RcppExport SEXP _patRoon_getIsolationMZs(SEXP backendSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP minTICSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minTIC(minTICSEXP);
    rcpp_result_gen = Rcpp::wrap(getIsolationMZs(backend, method, mzWindow, minTIC));
    return rcpp_result_gen;
END_RCPP
}
// getIsolationMZsAndMobs
Rcpp::List getIsolationMZsAndMobs(const MSReadBackend& backend, const std::string& method, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::Mobility mobWindow, SpectrumRawTypes::Intensity minTIC);
RcppExport SEXP _patRoon_getIsolationMZsAndMobs(SEXP backendSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP mobWindowSEXP, SEXP minTICSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobWindow(mobWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minTIC(minTICSEXP);
    rcpp_result_gen = Rcpp::wrap(getIsolationMZsAndMobs(backend, method, mzWindow, mobWindow, minTIC));
    return rcpp_result_gen;
END_RCPP
}
// getIMSIsolationInfo
Rcpp::List getIMSIsolationInfo(const MSReadBackend& backend);
RcppExport SEXP _patRoon_getIMSIsolationInfo(SEXP backendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    rcpp_result_gen = Rcpp::wrap(getIMSIsolationInfo(backend));
    return rcpp_result_gen;
END_RCPP
}
// testMS1Writer
void testMS1Writer(const MSReadBackend& backend, const std::string& out, SpectrumRawTypes::Mass mzStart, SpectrumRawTypes::Mass mzEnd, SpectrumRawTypes::Mobility mobilityStart, SpectrumRawTypes::Mobility mobilityEnd, const std::string& method, SpectrumRawTypes::Mass mzWindow, SpectrumRawTypes::PeakAbundance minAbundance, unsigned topMost, SpectrumRawTypes::Intensity minIntensityIMS, SpectrumRawTypes::Intensity minIntensityPre);
RcppExport SEXP _patRoon_testMS1Writer(SEXP backendSEXP, SEXP outSEXP, SEXP mzStartSEXP, SEXP mzEndSEXP, SEXP mobilityStartSEXP, SEXP mobilityEndSEXP, SEXP methodSEXP, SEXP mzWindowSEXP, SEXP minAbundanceSEXP, SEXP topMostSEXP, SEXP minIntensityIMSSEXP, SEXP minIntensityPreSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type out(outSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzStart(mzStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzEnd(mzEndSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityStart(mobilityStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mobility >::type mobilityEnd(mobilityEndSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzWindow(mzWindowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundance(minAbundanceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityIMS(minIntensityIMSSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensityPre(minIntensityPreSEXP);
    testMS1Writer(backend, out, mzStart, mzEnd, mobilityStart, mobilityEnd, method, mzWindow, minAbundance, topMost, minIntensityIMS, minIntensityPre);
    return R_NilValue;
END_RCPP
}
// getChromMob
Rcpp::List getChromMob(const MSReadBackend& backend, SpectrumRawTypes::Mass mzStart, SpectrumRawTypes::Mass mzEnd);
RcppExport SEXP _patRoon_getChromMob(SEXP backendSEXP, SEXP mzStartSEXP, SEXP mzEndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MSReadBackend& >::type backend(backendSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzStart(mzStartSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type mzEnd(mzEndSEXP);
    rcpp_result_gen = Rcpp::wrap(getChromMob(backend, mzStart, mzEnd));
    return rcpp_result_gen;
END_RCPP
}
// readMSP
Rcpp::List readMSP(Rcpp::CharacterVector file, Rcpp::LogicalVector pc);
RcppExport SEXP _patRoon_readMSP(SEXP fileSEXP, SEXP pcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type pc(pcSEXP);
    rcpp_result_gen = Rcpp::wrap(readMSP(file, pc));
    return rcpp_result_gen;
END_RCPP
}
// writeMSPLibrary
void writeMSPLibrary(Rcpp::CharacterMatrix recordsM, Rcpp::List spectraList, Rcpp::CharacterVector outCV);
RcppExport SEXP _patRoon_writeMSPLibrary(SEXP recordsMSEXP, SEXP spectraListSEXP, SEXP outCVSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix >::type recordsM(recordsMSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type spectraList(spectraListSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type outCV(outCVSEXP);
    writeMSPLibrary(recordsM, spectraList, outCV);
    return R_NilValue;
END_RCPP
}
// readMoNAJSON
Rcpp::List readMoNAJSON(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_readMoNAJSON(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(readMoNAJSON(file));
    return rcpp_result_gen;
END_RCPP
}
// parseAdductConsXMLFile
Rcpp::List parseAdductConsXMLFile(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_parseAdductConsXMLFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(parseAdductConsXMLFile(file));
    return rcpp_result_gen;
END_RCPP
}
// parseFeatureXMLFile
Rcpp::DataFrame parseFeatureXMLFile(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_parseFeatureXMLFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFeatureXMLFile(file));
    return rcpp_result_gen;
END_RCPP
}
// parseFeatureMRMXMLFile
Rcpp::DataFrame parseFeatureMRMXMLFile(Rcpp::CharacterVector file);
RcppExport SEXP _patRoon_parseFeatureMRMXMLFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFeatureMRMXMLFile(file));
    return rcpp_result_gen;
END_RCPP
}
// parseFeatConsXMLFile
Rcpp::List parseFeatConsXMLFile(Rcpp::CharacterVector file, Rcpp::IntegerVector anaCount);
RcppExport SEXP _patRoon_parseFeatConsXMLFile(SEXP fileSEXP, SEXP anaCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type anaCount(anaCountSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFeatConsXMLFile(file, anaCount));
    return rcpp_result_gen;
END_RCPP
}
// writeFeatureXML
void writeFeatureXML(Rcpp::DataFrame featList, Rcpp::CharacterVector fPath, Rcpp::CharacterVector out, Rcpp::LogicalVector hulls);
RcppExport SEXP _patRoon_writeFeatureXML(SEXP featListSEXP, SEXP fPathSEXP, SEXP outSEXP, SEXP hullsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type featList(featListSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type fPath(fPathSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type out(outSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type hulls(hullsSEXP);
    writeFeatureXML(featList, fPath, out, hulls);
    return R_NilValue;
END_RCPP
}
// doFindPeaksPiek
Rcpp::List doFindPeaksPiek(Rcpp::List EICs, bool fillEICs, double minIntensity, int SN, double peakWidthMin, double peakWidthMax, double RTMin, double RTMax, int maxPeaksPerSignal, bool verbose);
RcppExport SEXP _patRoon_doFindPeaksPiek(SEXP EICsSEXP, SEXP fillEICsSEXP, SEXP minIntensitySEXP, SEXP SNSEXP, SEXP peakWidthMinSEXP, SEXP peakWidthMaxSEXP, SEXP RTMinSEXP, SEXP RTMaxSEXP, SEXP maxPeaksPerSignalSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type EICs(EICsSEXP);
    Rcpp::traits::input_parameter< bool >::type fillEICs(fillEICsSEXP);
    Rcpp::traits::input_parameter< double >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< int >::type SN(SNSEXP);
    Rcpp::traits::input_parameter< double >::type peakWidthMin(peakWidthMinSEXP);
    Rcpp::traits::input_parameter< double >::type peakWidthMax(peakWidthMaxSEXP);
    Rcpp::traits::input_parameter< double >::type RTMin(RTMinSEXP);
    Rcpp::traits::input_parameter< double >::type RTMax(RTMaxSEXP);
    Rcpp::traits::input_parameter< int >::type maxPeaksPerSignal(maxPeaksPerSignalSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(doFindPeaksPiek(EICs, fillEICs, minIntensity, SN, peakWidthMin, peakWidthMax, RTMin, RTMax, maxPeaksPerSignal, verbose));
    return rcpp_result_gen;
END_RCPP
}
// findFeatSuspTableDups
Rcpp::LogicalVector findFeatSuspTableDups(const Rcpp::NumericVector& rts, const Rcpp::NumericVector& mzs, const Rcpp::NumericVector& mobs, const Rcpp::NumericVector& ints, double tolRT, double tolMZ, double tolMob);
RcppExport SEXP _patRoon_findFeatSuspTableDups(SEXP rtsSEXP, SEXP mzsSEXP, SEXP mobsSEXP, SEXP intsSEXP, SEXP tolRTSEXP, SEXP tolMZSEXP, SEXP tolMobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rts(rtsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mzs(mzsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mobs(mobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type ints(intsSEXP);
    Rcpp::traits::input_parameter< double >::type tolRT(tolRTSEXP);
    Rcpp::traits::input_parameter< double >::type tolMZ(tolMZSEXP);
    Rcpp::traits::input_parameter< double >::type tolMob(tolMobSEXP);
    rcpp_result_gen = Rcpp::wrap(findFeatSuspTableDups(rts, mzs, mobs, ints, tolRT, tolMZ, tolMob));
    return rcpp_result_gen;
END_RCPP
}
// filterEICBins
Rcpp::LogicalVector filterEICBins(const Rcpp::NumericVector& binStartMZs, const double mzBinWidth, const Rcpp::NumericVector& binStartMobs, const double mobBinWidth, const Rcpp::NumericVector& checkStartMZs, const Rcpp::NumericVector& checkEndMZs, const Rcpp::NumericVector& checkStartMobs, const Rcpp::NumericVector& checkEndMobs);
RcppExport SEXP _patRoon_filterEICBins(SEXP binStartMZsSEXP, SEXP mzBinWidthSEXP, SEXP binStartMobsSEXP, SEXP mobBinWidthSEXP, SEXP checkStartMZsSEXP, SEXP checkEndMZsSEXP, SEXP checkStartMobsSEXP, SEXP checkEndMobsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type binStartMZs(binStartMZsSEXP);
    Rcpp::traits::input_parameter< const double >::type mzBinWidth(mzBinWidthSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type binStartMobs(binStartMobsSEXP);
    Rcpp::traits::input_parameter< const double >::type mobBinWidth(mobBinWidthSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type checkStartMZs(checkStartMZsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type checkEndMZs(checkEndMZsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type checkStartMobs(checkStartMobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type checkEndMobs(checkEndMobsSEXP);
    rcpp_result_gen = Rcpp::wrap(filterEICBins(binStartMZs, mzBinWidth, binStartMobs, mobBinWidth, checkStartMZs, checkEndMZs, checkStartMobs, checkEndMobs));
    return rcpp_result_gen;
END_RCPP
}
// specDistMatrix
Rcpp::NumericMatrix specDistMatrix(Rcpp::List specList, Rcpp::CharacterVector method, Rcpp::CharacterVector shift, Rcpp::NumericVector precMZs, Rcpp::NumericVector mzWeight, Rcpp::NumericVector intWeight, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_specDistMatrix(SEXP specListSEXP, SEXP methodSEXP, SEXP shiftSEXP, SEXP precMZsSEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type specList(specListSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precMZs(precMZsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(specDistMatrix(specList, method, shift, precMZs, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// specDistRect
Rcpp::NumericMatrix specDistRect(Rcpp::List specList1, Rcpp::List specList2, Rcpp::CharacterVector method, Rcpp::CharacterVector shift, Rcpp::NumericVector precMZs1, Rcpp::NumericVector precMZs2, Rcpp::NumericVector mzWeight, Rcpp::NumericVector intWeight, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_specDistRect(SEXP specList1SEXP, SEXP specList2SEXP, SEXP methodSEXP, SEXP shiftSEXP, SEXP precMZs1SEXP, SEXP precMZs2SEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type specList1(specList1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type specList2(specList2SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precMZs1(precMZs1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precMZs2(precMZs2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(specDistRect(specList1, specList2, method, shift, precMZs1, precMZs2, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// testSpecFilter
Rcpp::DataFrame testSpecFilter(const std::vector<SpectrumRawTypes::Mass>& mzs, const std::vector<SpectrumRawTypes::Intensity>& ints, double mzMin, double mzMax, double minInt, unsigned topMost, double prec);
RcppExport SEXP _patRoon_testSpecFilter(SEXP mzsSEXP, SEXP intsSEXP, SEXP mzMinSEXP, SEXP mzMaxSEXP, SEXP minIntSEXP, SEXP topMostSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Mass>& >::type mzs(mzsSEXP);
    Rcpp::traits::input_parameter< const std::vector<SpectrumRawTypes::Intensity>& >::type ints(intsSEXP);
    Rcpp::traits::input_parameter< double >::type mzMin(mzMinSEXP);
    Rcpp::traits::input_parameter< double >::type mzMax(mzMaxSEXP);
    Rcpp::traits::input_parameter< double >::type minInt(minIntSEXP);
    Rcpp::traits::input_parameter< unsigned >::type topMost(topMostSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(testSpecFilter(mzs, ints, mzMin, mzMax, minInt, topMost, prec));
    return rcpp_result_gen;
END_RCPP
}
// testClusterNums
Rcpp::DataFrame testClusterNums(const std::vector<double>& nums, const std::string& method, double window);
RcppExport SEXP _patRoon_testClusterNums(SEXP numsSEXP, SEXP methodSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(testClusterNums(nums, method, window));
    return rcpp_result_gen;
END_RCPP
}
// testClusterNums2
std::vector<double> testClusterNums2(const std::vector<double>& nums, const std::string& method, double window);
RcppExport SEXP _patRoon_testClusterNums2(SEXP numsSEXP, SEXP methodSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nums(numsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(testClusterNums2(nums, method, window));
    return rcpp_result_gen;
END_RCPP
}
// doAverageSpectraList
Rcpp::List doAverageSpectraList(Rcpp::List specsList, const std::string& method, SpectrumRawTypes::Mass window, SpectrumRawTypes::Intensity minIntensity, SpectrumRawTypes::PeakAbundance minAbundanceRel, SpectrumRawTypes::PeakAbundance minAbundanceAbs);
RcppExport SEXP _patRoon_doAverageSpectraList(SEXP specsListSEXP, SEXP methodSEXP, SEXP windowSEXP, SEXP minIntensitySEXP, SEXP minAbundanceRelSEXP, SEXP minAbundanceAbsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type specsList(specsListSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Mass >::type window(windowSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::Intensity >::type minIntensity(minIntensitySEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceRel(minAbundanceRelSEXP);
    Rcpp::traits::input_parameter< SpectrumRawTypes::PeakAbundance >::type minAbundanceAbs(minAbundanceAbsSEXP);
    rcpp_result_gen = Rcpp::wrap(doAverageSpectraList(specsList, method, window, minIntensity, minAbundanceRel, minAbundanceAbs));
    return rcpp_result_gen;
END_RCPP
}
// loadEICIntensities
Rcpp::NumericVector loadEICIntensities(Rcpp::List spectra, Rcpp::DataFrame featList, Rcpp::NumericVector rtWindow);
RcppExport SEXP _patRoon_loadEICIntensities(SEXP spectraSEXP, SEXP featListSEXP, SEXP rtWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type featList(featListSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rtWindow(rtWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(loadEICIntensities(spectra, featList, rtWindow));
    return rcpp_result_gen;
END_RCPP
}
// loadEICs
Rcpp::List loadEICs(Rcpp::List spectra, Rcpp::NumericVector rtMins, Rcpp::NumericVector rtMaxs, Rcpp::NumericVector mzMins, Rcpp::NumericVector mzMaxs);
RcppExport SEXP _patRoon_loadEICs(SEXP spectraSEXP, SEXP rtMinsSEXP, SEXP rtMaxsSEXP, SEXP mzMinsSEXP, SEXP mzMaxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rtMins(rtMinsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rtMaxs(rtMaxsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzMins(mzMinsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzMaxs(mzMaxsSEXP);
    rcpp_result_gen = Rcpp::wrap(loadEICs(spectra, rtMins, rtMaxs, mzMins, mzMaxs));
    return rcpp_result_gen;
END_RCPP
}
// makeSAFDInput
Rcpp::List makeSAFDInput(Rcpp::List spectra, Rcpp::NumericVector mzRange);
RcppExport SEXP _patRoon_makeSAFDInput(SEXP spectraSEXP, SEXP mzRangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type spectra(spectraSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzRange(mzRangeSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSAFDInput(spectra, mzRange));
    return rcpp_result_gen;
END_RCPP
}
// binSpectra
Rcpp::DataFrame binSpectra(Rcpp::DataFrame sp1, Rcpp::DataFrame sp2, Rcpp::CharacterVector shift, Rcpp::NumericVector precDiff, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_binSpectra(SEXP sp1SEXP, SEXP sp2SEXP, SEXP shiftSEXP, SEXP precDiffSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp1(sp1SEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp2(sp2SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precDiff(precDiffSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(binSpectra(sp1, sp2, shift, precDiff, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// calcSpecSimilarity
Rcpp::NumericVector calcSpecSimilarity(Rcpp::DataFrame sp1, Rcpp::DataFrame sp2, Rcpp::CharacterVector method, Rcpp::CharacterVector shift, Rcpp::NumericVector precDiff, Rcpp::NumericVector mzWeight, Rcpp::NumericVector intWeight, Rcpp::NumericVector mzWindow);
RcppExport SEXP _patRoon_calcSpecSimilarity(SEXP sp1SEXP, SEXP sp2SEXP, SEXP methodSEXP, SEXP shiftSEXP, SEXP precDiffSEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp1(sp1SEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type sp2(sp2SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type precDiff(precDiffSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(calcSpecSimilarity(sp1, sp2, method, shift, precDiff, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// calcAnnSims
std::vector<double> calcAnnSims(Rcpp::DataFrame spectrum, Rcpp::List annotatedInds, const std::string& method, double mzWeight, double intWeight, double mzWindow);
RcppExport SEXP _patRoon_calcAnnSims(SEXP spectrumSEXP, SEXP annotatedIndsSEXP, SEXP methodSEXP, SEXP mzWeightSEXP, SEXP intWeightSEXP, SEXP mzWindowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type spectrum(spectrumSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type annotatedInds(annotatedIndsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type mzWeight(mzWeightSEXP);
    Rcpp::traits::input_parameter< double >::type intWeight(intWeightSEXP);
    Rcpp::traits::input_parameter< double >::type mzWindow(mzWindowSEXP);
    rcpp_result_gen = Rcpp::wrap(calcAnnSims(spectrum, annotatedInds, method, mzWeight, intWeight, mzWindow));
    return rcpp_result_gen;
END_RCPP
}
// addFilesToOpenMSIni
void addFilesToOpenMSIni(const std::string& file, const std::vector<std::string>& inFiles, const std::vector<std::string>& outFiles);
RcppExport SEXP _patRoon_addFilesToOpenMSIni(SEXP fileSEXP, SEXP inFilesSEXP, SEXP outFilesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type inFiles(inFilesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type outFiles(outFilesSEXP);
    addFilesToOpenMSIni(file, inFiles, outFiles);
    return R_NilValue;
END_RCPP
}
// loadAgilentIMSCalibration
Rcpp::List loadAgilentIMSCalibration(const std::string& file);
RcppExport SEXP _patRoon_loadAgilentIMSCalibration(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(loadAgilentIMSCalibration(file));
    return rcpp_result_gen;
END_RCPP
}
// getOMPMaxNumThreads
int getOMPMaxNumThreads();
RcppExport SEXP _patRoon_getOMPMaxNumThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getOMPMaxNumThreads());
    return rcpp_result_gen;
END_RCPP
}
// setOMPNumThreads
void setOMPNumThreads(int n);
RcppExport SEXP _patRoon_setOMPNumThreads(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    setOMPNumThreads(n);
    return R_NilValue;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _patRoon_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("bool(*initBrukerLibrary)(const std::string&,bool)");
        signatures.insert("Rcpp::NumericVector(*getBrukerCCS)(Rcpp::NumericVector,Rcpp::IntegerVector,Rcpp::NumericVector)");
        signatures.insert("Rcpp::NumericVector(*getBrukerMob)(Rcpp::NumericVector,Rcpp::IntegerVector,Rcpp::NumericVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _patRoon_RcppExport_registerCCallable() { 
    R_RegisterCCallable("patRoon", "_patRoon_initBrukerLibrary", (DL_FUNC)_patRoon_initBrukerLibrary_try);
    R_RegisterCCallable("patRoon", "_patRoon_getBrukerCCS", (DL_FUNC)_patRoon_getBrukerCCS_try);
    R_RegisterCCallable("patRoon", "_patRoon_getBrukerMob", (DL_FUNC)_patRoon_getBrukerMob_try);
    R_RegisterCCallable("patRoon", "_patRoon_RcppExport_validate", (DL_FUNC)_patRoon_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP _rcpp_module_boot_MSReadBackend();

static const R_CallMethodDef CallEntries[] = {
    {"_patRoon_writeTraML", (DL_FUNC) &_patRoon_writeTraML, 2},
    {"_patRoon_writeChromsToMzML", (DL_FUNC) &_patRoon_writeChromsToMzML, 4},
    {"_patRoon_getGroupIDs", (DL_FUNC) &_patRoon_getGroupIDs, 10},
    {"_patRoon_initBrukerLibrary", (DL_FUNC) &_patRoon_initBrukerLibrary, 2},
    {"_patRoon_getBrukerCCS", (DL_FUNC) &_patRoon_getBrukerCCS, 3},
    {"_patRoon_getBrukerMob", (DL_FUNC) &_patRoon_getBrukerMob, 3},
    {"_patRoon_backendAvailable", (DL_FUNC) &_patRoon_backendAvailable, 1},
    {"_patRoon_walkSpectra", (DL_FUNC) &_patRoon_walkSpectra, 1},
    {"_patRoon_getMSSpectrum", (DL_FUNC) &_patRoon_getMSSpectrum, 4},
    {"_patRoon_getCollapsedFrame", (DL_FUNC) &_patRoon_getCollapsedFrame, 8},
    {"_patRoon_getCentroidedFrame", (DL_FUNC) &_patRoon_getCentroidedFrame, 6},
    {"_patRoon_getScans", (DL_FUNC) &_patRoon_getScans, 6},
    {"_patRoon_getEICList", (DL_FUNC) &_patRoon_getEICList, 16},
    {"_patRoon_doFillEIXIntensities", (DL_FUNC) &_patRoon_doFillEIXIntensities, 3},
    {"_patRoon_padEIX", (DL_FUNC) &_patRoon_padEIX, 5},
    {"_patRoon_getMSMetadata", (DL_FUNC) &_patRoon_getMSMetadata, 2},
    {"_patRoon_setSpecMetadata", (DL_FUNC) &_patRoon_setSpecMetadata, 3},
    {"_patRoon_getMSPeakLists", (DL_FUNC) &_patRoon_getMSPeakLists, 21},
    {"_patRoon_getEIMList", (DL_FUNC) &_patRoon_getEIMList, 10},
    {"_patRoon_compressEIM", (DL_FUNC) &_patRoon_compressEIM, 2},
    {"_patRoon_getPeakIntensities", (DL_FUNC) &_patRoon_getPeakIntensities, 4},
    {"_patRoon_collapseIMSFrames", (DL_FUNC) &_patRoon_collapseIMSFrames, 13},
    {"_patRoon_getIsolationMZs", (DL_FUNC) &_patRoon_getIsolationMZs, 4},
    {"_patRoon_getIsolationMZsAndMobs", (DL_FUNC) &_patRoon_getIsolationMZsAndMobs, 5},
    {"_patRoon_getIMSIsolationInfo", (DL_FUNC) &_patRoon_getIMSIsolationInfo, 1},
    {"_patRoon_testMS1Writer", (DL_FUNC) &_patRoon_testMS1Writer, 12},
    {"_patRoon_getChromMob", (DL_FUNC) &_patRoon_getChromMob, 3},
    {"_patRoon_readMSP", (DL_FUNC) &_patRoon_readMSP, 2},
    {"_patRoon_writeMSPLibrary", (DL_FUNC) &_patRoon_writeMSPLibrary, 3},
    {"_patRoon_readMoNAJSON", (DL_FUNC) &_patRoon_readMoNAJSON, 1},
    {"_patRoon_parseAdductConsXMLFile", (DL_FUNC) &_patRoon_parseAdductConsXMLFile, 1},
    {"_patRoon_parseFeatureXMLFile", (DL_FUNC) &_patRoon_parseFeatureXMLFile, 1},
    {"_patRoon_parseFeatureMRMXMLFile", (DL_FUNC) &_patRoon_parseFeatureMRMXMLFile, 1},
    {"_patRoon_parseFeatConsXMLFile", (DL_FUNC) &_patRoon_parseFeatConsXMLFile, 2},
    {"_patRoon_writeFeatureXML", (DL_FUNC) &_patRoon_writeFeatureXML, 4},
    {"_patRoon_doFindPeaksPiek", (DL_FUNC) &_patRoon_doFindPeaksPiek, 10},
    {"_patRoon_findFeatSuspTableDups", (DL_FUNC) &_patRoon_findFeatSuspTableDups, 7},
    {"_patRoon_filterEICBins", (DL_FUNC) &_patRoon_filterEICBins, 8},
    {"_patRoon_specDistMatrix", (DL_FUNC) &_patRoon_specDistMatrix, 7},
    {"_patRoon_specDistRect", (DL_FUNC) &_patRoon_specDistRect, 9},
    {"_patRoon_testSpecFilter", (DL_FUNC) &_patRoon_testSpecFilter, 7},
    {"_patRoon_testClusterNums", (DL_FUNC) &_patRoon_testClusterNums, 3},
    {"_patRoon_testClusterNums2", (DL_FUNC) &_patRoon_testClusterNums2, 3},
    {"_patRoon_doAverageSpectraList", (DL_FUNC) &_patRoon_doAverageSpectraList, 6},
    {"_patRoon_loadEICIntensities", (DL_FUNC) &_patRoon_loadEICIntensities, 3},
    {"_patRoon_loadEICs", (DL_FUNC) &_patRoon_loadEICs, 5},
    {"_patRoon_makeSAFDInput", (DL_FUNC) &_patRoon_makeSAFDInput, 2},
    {"_patRoon_binSpectra", (DL_FUNC) &_patRoon_binSpectra, 5},
    {"_patRoon_calcSpecSimilarity", (DL_FUNC) &_patRoon_calcSpecSimilarity, 8},
    {"_patRoon_calcAnnSims", (DL_FUNC) &_patRoon_calcAnnSims, 6},
    {"_patRoon_addFilesToOpenMSIni", (DL_FUNC) &_patRoon_addFilesToOpenMSIni, 3},
    {"_patRoon_loadAgilentIMSCalibration", (DL_FUNC) &_patRoon_loadAgilentIMSCalibration, 1},
    {"_patRoon_getOMPMaxNumThreads", (DL_FUNC) &_patRoon_getOMPMaxNumThreads, 0},
    {"_patRoon_setOMPNumThreads", (DL_FUNC) &_patRoon_setOMPNumThreads, 1},
    {"_rcpp_module_boot_MSReadBackend", (DL_FUNC) &_rcpp_module_boot_MSReadBackend, 0},
    {"_patRoon_RcppExport_registerCCallable", (DL_FUNC) &_patRoon_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_patRoon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
